<ModelBehaviors>
	<!-- #################################################### -->
	<!-- Template converted and now working using InputEvents -->
	<!-- #################################################### -->

	<!-- LOCKED : TYPE:LOCKED & TYPE:(airliner)AS02A unsupported by InputEvents -->
	<Template Name="ASOBO_ELECTRICAL_Battery_SubTemplate">
		<Parameters Type="Default">
			<ANIM_NAME>ELECTRICAL_#INTERACTION_TYPE#_Battery_Master_#ID#</ANIM_NAME>
			<NODE_ID>ELECTRICAL_#INTERACTION_TYPE#_Battery_Master_#ID#</NODE_ID>
			<PART_ID>ELECTRICAL_#INTERACTION_TYPE#_Battery_Master</PART_ID>
			<Condition Valid="IS_AIRLINER">
				<ANIM_NAME_LOCK>ELECTRICAL_#INTERACTION_TYPE#_Battery_Master_#ID#_Lock</ANIM_NAME_LOCK>
				<NODE_ID_LOCK>ELECTRICAL_#INTERACTION_TYPE#_Battery_Master_#ID#_Lock</NODE_ID_LOCK>
				<FAULT_NODE_ID>ELECTRICAL_#INTERACTION_TYPE#_Battery_Master_Fault_#ID#</FAULT_NODE_ID>
				<OFF_NODE_ID>ELECTRICAL_#INTERACTION_TYPE#_Battery_Master_Off_#ID#</OFF_NODE_ID>
				<ON_NODE_ID>ELECTRICAL_#INTERACTION_TYPE#_Battery_Master_On_#ID#</ON_NODE_ID>
			</Condition>
			<Switch Param="INTERACTION_TYPE">
				<Case Value="Switch">
					<Condition Check="TYPE">
						<SWITCH_TYPE>#TYPE#</SWITCH_TYPE>
					</Condition>
				</Case>
			</Switch>
		</Parameters>
		<Parameters Type="Default">
			<Switch Param="INTERACTION_TYPE">
				<Case Value="Switch">
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>
					<Switch Param="SWITCH_TYPE">
						<Case Value="ON_OFF_EMERGENCY">
							<MAIN_BUS_ID>1</MAIN_BUS_ID>
							<ESSENTIAL_BUS_ID>2</ESSENTIAL_BUS_ID>
							<BATTERY_BUS_ID>3</BATTERY_BUS_ID>
						</Case>
						<Case Value="LOCKED">
							<LOCK_NODE_ID>#NODE_ID#_Lock</LOCK_NODE_ID>
							<LOCK_ANIM_NAME>#ANIM_NAME#_Lock</LOCK_ANIM_NAME>
							<COVER_IE_NAME>Battery_#ID#_Cover</COVER_IE_NAME>
							<COVER_IE_ID_SOURCE>ELECTRICAL</COVER_IE_ID_SOURCE>
						</Case>
					</Switch>
				</Case>
			</Switch>
			<Condition Check="SET_AVIONIC_CIRCUIT">
				<True>
					<ON_TOGGLE_MASTER_BATTERY>
						(A:ELECTRICAL MASTER BATTERY:1, Bool) (A:AVIONICS MASTER SWITCH,Bool) != if{ (&gt;K:TOGGLE_AVIONICS_MASTER) }
					</ON_TOGGLE_MASTER_BATTERY>
				</True>
				<False>
					<ON_TOGGLE_MASTER_BATTERY/>
				</False>
			</Condition>
		</Parameters>
		<Parameters Type="Override">
			<Switch Param="SWITCH_TYPE">
				<Case Value="AIRBUS">
					<TYPE>ON_OFF</TYPE>
					<IS_AIRLINER>True</IS_AIRLINER>
					<Condition Check="BATTERY_BUS_ID">
						<True>
							<SEQ1_EMISSIVE_CODE>0</SEQ1_EMISSIVE_CODE>
							<SEQ2_EMISSIVE_CODE>#BATTERY_BUS_ID# (A:1:BUS CONNECTION ON:#HOT_BATTERY_BUS_ID#, Bool) !</SEQ2_EMISSIVE_CODE>
						</True>
						<False>
							<SEQ1_EMISSIVE_CODE>0</SEQ1_EMISSIVE_CODE>
							<SEQ2_EMISSIVE_CODE>(A:ELECTRICAL MASTER BATTERY:#ID#, Bool) !</SEQ2_EMISSIVE_CODE>
						</False>
					</Condition>
				</Case>
				<Case Value="BOEING">
					<TYPE>ON_OFF</TYPE>
					<IS_AIRLINER>True</IS_AIRLINER>
					<Condition Check="BATTERY_BUS_ID">
						<True>
							<SEQ1_EMISSIVE_CODE>#BATTERY_BUS_ID# (A:1:BUS CONNECTION ON:#HOT_BATTERY_BUS_ID#, Bool)</SEQ1_EMISSIVE_CODE>
							<SEQ2_EMISSIVE_CODE>#BATTERY_BUS_ID# (A:1:BUS CONNECTION ON:#HOT_BATTERY_BUS_ID#, Bool) !</SEQ2_EMISSIVE_CODE>
						</True>
						<False>
							<SEQ1_EMISSIVE_CODE>(A:ELECTRICAL MASTER BATTERY:#ID#, Bool)</SEQ1_EMISSIVE_CODE>
							<SEQ2_EMISSIVE_CODE>(A:ELECTRICAL MASTER BATTERY:#ID#, Bool) !</SEQ2_EMISSIVE_CODE>
						</False>
					</Condition>
				</Case>
				<Case Value="AS02A">
					<TYPE>ON_OFF</TYPE>
					<IS_AIRLINER>True</IS_AIRLINER>
				</Case>
				<Case Value="ON_OFF_EMERGENCY">
					<TYPE>ON_OFF_EMERGENCY</TYPE>
					<IS_AIRLINER>False</IS_AIRLINER>
				</Case>
				<Case Value="GPU_BATT_OFF">
					<TYPE>GPU_BATT_OFF</TYPE>
					<IS_AIRLINER>False</IS_AIRLINER>
				</Case>
				<Default>
					<TYPE>ON_OFF</TYPE>
					<IS_AIRLINER>False</IS_AIRLINER>
				</Default>
			</Switch>
		</Parameters>
		<Parameters Type="Default">
			<Switch Param="TYPE">
				<Case Value="ON_OFF">
					<STATE_ON>1</STATE_ON>
					<STATE_OFF>0</STATE_OFF>
				</Case>
				<Case Value="ON_OFF_EMERGENCY">
					<STATE_ON>0</STATE_ON>
					<STATE_OFF>1</STATE_OFF>
					<STATE_EMERGENCY>2</STATE_EMERGENCY>
				</Case>
				<Case Value="GPU_BATT_OFF">
					<STATE_GPU>0</STATE_GPU>
					<STATE_BATT>1</STATE_BATT>
					<STATE_OFF>2</STATE_OFF>
				</Case>
			</Switch>
		</Parameters>
		<Parameters Type="Default">
			<TOOLTIP_BATTERY_TITLE>@TT_Package.ELECTRICAL_BATTERY_TITLE</TOOLTIP_BATTERY_TITLE>
		</Parameters>
		<Parameters Type="Override">
			<TOOLTIP_TITLE>#TOOLTIP_BATTERY_TITLE#</TOOLTIP_TITLE>
			<TOOLTIP_ENTRY_0>ELECTRICAL_Battery_#ID#</TOOLTIP_ENTRY_0>
		</Parameters>
		<UseInputEvent ID="ELECTRICAL">
			<BATTERY_ID>#ID#</BATTERY_ID>
			<ON_STATE_CHANGED_EXTERNAL_CODE>#ON_TOGGLE_MASTER_BATTERY#</ON_STATE_CHANGED_EXTERNAL_CODE>
		</UseInputEvent>
		<Condition Valid="IS_AIRLINER">
			<True>
				<Condition Check="BATTERY_BUS_ID">
					<True>
						<UseTemplate Name="ASOBO_GT_Helper_Recursive_Param_Builder">
							<EXIT_TEMPLATE>ASOBO_GT_Update</EXIT_TEMPLATE>
							<PARAM_NAME>UPDATE_CODE</PARAM_NAME>
							<PARAM_START> 
							(* Prevent Battery from being shut down, instead disconnect it from bus *)
							</PARAM_START>
							<PARAM_REPEATED_START>(A:ELECTRICAL MASTER BATTERY:</PARAM_REPEATED_START>
							<PARAM_REPEATED_END>, Bool) ! if{ </PARAM_REPEATED_END>
							<PARAM_REPEATED_2_START>
								#BATTERY_BUS_ID# (A:1:BUS CONNECTION ON:#HOT_BATTERY_BUS_ID#, Bool) if{ 
									#BATTERY_BUS_ID# #HOT_BATTERY_BUS_ID# (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
								}
							</PARAM_REPEATED_2_START>
							<PARAM_REPEATED_2_END> (&gt;K:TOGGLE_MASTER_BATTERY)
								}
							</PARAM_REPEATED_2_END>
							<FREQUENCY>1</FREQUENCY>
						</UseTemplate>
					</True>
				</Condition>
				<Switch Param="SWITCH_TYPE">
					<Case Value="AS02A">
						<!-- TODO: InputEvent for this specific case -->
						<Component ID="#NODE_ID_LOCK#" Node="#NODE_ID_LOCK#">
							<UseTemplate Name="ASOBO_GT_Switch_Code">
								<ANIM_NAME>#ANIM_NAME_LOCK#</ANIM_NAME>
								<ANIM_CODE>(L:XMLVAR_BatteryStatus_Unlocked) 100 *</ANIM_CODE>
								<LEFT_SINGLE_CODE>(L:XMLVAR_BatteryStatus_Unlocked) ! (&gt;L:XMLVAR_BatteryStatus_Unlocked)</LEFT_SINGLE_CODE>
								<WWISE_EVENT_1>lock_battery_switch_on</WWISE_EVENT_1>
								<WWISE_EVENT_2>lock_battery_switch_off</WWISE_EVENT_2>
								<ANIMREF_ID>0</ANIMREF_ID>
								<ANIMTIP_0_ON_PERCENT>0</ANIMTIP_0_ON_PERCENT>
								<ANIMTIP_1_ON_PERCENT>1</ANIMTIP_1_ON_PERCENT>
								<ANIMTIP_0>TT:COCKPIT.TOOLTIPS.BATTERY_SWITCH_GUARD_ON</ANIMTIP_0>
								<ANIMTIP_1>TT:COCKPIT.TOOLTIPS.BATTERY_SWITCH_GUARD_OFF</ANIMTIP_1>
							</UseTemplate>
						</Component>
						<Component ID="#NODE_ID#" Node="#NODE_ID#">
							<UseTemplate Name = "ASOBO_GT_Switch_3States">
								<SWITCH_POSITION_TYPE>L</SWITCH_POSITION_TYPE>
								<SWITCH_POSITION_VAR>XMLVAR_BatteryStatus</SWITCH_POSITION_VAR>
								<CODE_POS_0_VERIF>(L:XMLVAR_BatteryStatus_Unlocked) 1 ==</CODE_POS_0_VERIF>
								<STATE1_TEST>(L:XMLVAR_BatteryStatus) 0 == (L:XMLVAR_BatteryStatus_Unlocked) 0 == and</STATE1_TEST>
								<WWISE_EVENT>battery_switch</WWISE_EVENT>
								<!-- Logic for this is Handled inside of AS02A_Battery_Type_Switcher -->
							</UseTemplate>
						</Component>
					</Case>
					<Default>
						<UseTemplate Name="ASOBO_GT_Push_Button_Airliner">
							<LEFT_SINGLE_CODE>(&gt;B:ELECTRICAL_Battery_#ID#_Toggle)</LEFT_SINGLE_CODE>
							<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
							<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
						</UseTemplate>
					</Default>
				</Switch>
			</True>
			<False>
				<Switch Param="SWITCH_TYPE">
					<Case Value="ON_OFF_EMERGENCY">
						<Component ID="#NODE_ID#" Node="#NODE_ID#">
							<UseTemplate Name="ASOBO_GT_Switch_3States">
								<CODE_POS_#STATE_ON#>(&gt;B:ELECTRICAL_Battery_#ID#_On)</CODE_POS_#STATE_ON#>
								<CODE_POS_#STATE_OFF#>(&gt;B:ELECTRICAL_Battery_#ID#_Off)</CODE_POS_#STATE_OFF#>
								<CODE_POS_#STATE_EMERGENCY#>(&gt;B:ELECTRICAL_Battery_#ID#_Emergency)</CODE_POS_#STATE_EMERGENCY#>
								<STATE#STATE_ON#_TEST>(B:ELECTRICAL_Battery_#ID#, Number) #STATE_ON# ==</STATE#STATE_ON#_TEST>
								<STATE#STATE_OFF#_TEST>(B:ELECTRICAL_Battery_#ID#, Number) #STATE_OFF# ==</STATE#STATE_OFF#_TEST>
								<STATE#STATE_EMERGENCY#_TEST>(B:ELECTRICAL_Battery_#ID#, Number) #STATE_EMERGENCY# ==</STATE#STATE_EMERGENCY#_TEST>
								<WWISE_EVENT>battery_switch</WWISE_EVENT>
							</UseTemplate>
						</Component>
					</Case>
					<Case Value="GPU_BATT_OFF">
						<Component ID="#NODE_ID#" Node="#NODE_ID#">
							<UseTemplate Name="ASOBO_GT_Switch_3States">
								<CODE_POS_#STATE_GPU#>(&gt;B:ELECTRICAL_Battery_#ID#_GPU)</CODE_POS_#STATE_GPU#>
								<CODE_POS_#STATE_BATT#>(&gt;B:ELECTRICAL_Battery_#ID#_Battery)</CODE_POS_#STATE_BATT#>
								<CODE_POS_#STATE_OFF#>(&gt;B:ELECTRICAL_Battery_#ID#_Off)</CODE_POS_#STATE_OFF#>
								<STATE#STATE_GPU#_TEST>(B:ELECTRICAL_Battery_#ID#, Number) #STATE_GPU# ==</STATE#STATE_GPU#_TEST>
								<STATE#STATE_BATT#_TEST>(B:ELECTRICAL_Battery_#ID#, Number) #STATE_BATT# ==</STATE#STATE_BATT#_TEST>
								<STATE#STATE_OFF#_TEST>(B:ELECTRICAL_Battery_#ID#, Number) #STATE_OFF# ==</STATE#STATE_OFF#_TEST>
								<WWISE_EVENT>battery_switch</WWISE_EVENT>
							</UseTemplate>
						</Component>
					</Case>
					<Case Value="LOCKED">
						<UseTemplate Name="ASOBO_GT_Switch_Covered">
							<SWITCH_NODE_ID>#NODE_ID#</SWITCH_NODE_ID>
							<SWITCH_ANIM_NAME>#ANIM_NAME#</SWITCH_ANIM_NAME>
							<COVER_NODE_ID>#LOCK_NODE_ID#</COVER_NODE_ID>
							<COVER_ANIM_NAME>#LOCK_ANIM_NAME#</COVER_ANIM_NAME>
							<COVER_VAR_NAME>XMLVAR_ELECTRICAL_Battery_Cover_Opened</COVER_VAR_NAME>
							<COVER_VAR_TYPE>I</COVER_VAR_TYPE>
							<TOGGLE_STATE>(&gt;B:ELECTRICAL_Battery_#ID#_Toggle)</TOGGLE_STATE>
							<SWITCH_ANIM_CODE>(B:ELECTRICAL_Battery_#ID#, Bool) 100 *</SWITCH_ANIM_CODE>
						</UseTemplate>
					</Case>
					<Default>
						<Component ID="#NODE_ID#" Node="#NODE_ID#">
							<UseTemplate Name="ASOBO_GT_Switch_Code">
								<ANIM_CODE>(B:ELECTRICAL_Battery_#ID#, Number) #STATE_ON# == 100 *</ANIM_CODE>
								<LEFT_SINGLE_CODE>(&gt;B:ELECTRICAL_Battery_#ID#_Toggle)</LEFT_SINGLE_CODE>
								<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
								<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
							</UseTemplate>
						</Component>
					</Default>
				</Switch>
			</False>
		</Condition>
	</Template>

	<Template Name="ASOBO_ELECTRICAL_Avionics_Master_SubTemplate">
		<Parameters Type="Default">
			<ANIM_NAME>ELECTRICAL_#INTERACTION_TYPE#_Avionics_Master</ANIM_NAME>
			<NODE_ID>ELECTRICAL_#INTERACTION_TYPE#_Avionics_Master</NODE_ID>
			<PART_ID>ELECTRICAL_#INTERACTION_TYPE#_Avionics_Master</PART_ID>
			<WWISE_EVENT_1>avionic_switch_on</WWISE_EVENT_1>
			<WWISE_EVENT_2>avionic_switch_off</WWISE_EVENT_2>
			<TOOLTIP_AVIONICS_TITLE>@TT_Package.ELECTRICAL_SWITCH_AVIONICS_MASTER_TITLE</TOOLTIP_AVIONICS_TITLE>
			<TT_DESCRIPTION_ID>@TT_Package.ELECTRICAL_SWITCH_AVIONICS_MASTER_ACTION_SET</TT_DESCRIPTION_ID>
		</Parameters>
		<Parameters Type="Override">
			<BTN_ID>Avionics_Master</BTN_ID>
		</Parameters>
		<Component ID="#NODE_ID#" Node="#NODE_ID#">
			<UseInputEvent ID="ELECTRICAL">
				<SET_STATE_ON>1 (&gt;K:AVIONICS_MASTER_SET)</SET_STATE_ON>
				<SET_STATE_OFF>0 (&gt;K:AVIONICS_MASTER_SET)</SET_STATE_OFF>
				<GET_STATE_EXTERNAL>(A:AVIONICS MASTER SWITCH, Bool) sp0</GET_STATE_EXTERNAL>
				<SIM_STATE_IS_ON_EXTERNAL>l0</SIM_STATE_IS_ON_EXTERNAL>
				<SIMVAR_TO_WATCH_0>AVIONICS MASTER SWITCH</SIMVAR_TO_WATCH_0>
			</UseInputEvent>
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<TOOLTIP_TITLE>#TOOLTIP_AVIONICS_TITLE#</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>ELECTRICAL_#BTN_ID#</TOOLTIP_ENTRY_0>
				<LEFT_SINGLE_CODE>(&gt;B:ELECTRICAL_#BTN_ID#_Toggle)</LEFT_SINGLE_CODE>
				<ANIM_CODE>(B:ELECTRICAL_#BTN_ID#, Bool) 100 *</ANIM_CODE>
			</UseTemplate>
		</Component>
	</Template>

	<Template Name="ASOBO_ELECTRICAL_Engine_Bleed_SubTemplate">
		<Parameters Type="Default">
			<ANIM_NAME>ELECTRICAL_#INTERACTION_TYPE#_Engine_Bleed_#ID#</ANIM_NAME>
			<NODE_ID>ELECTRICAL_#INTERACTION_TYPE#_Engine_Bleed_#ID#</NODE_ID>
			<PART_ID>ELECTRICAL_#INTERACTION_TYPE#_Engine_Bleed</PART_ID>
			<WWISE_EVENT_1>engine_bleed_switch_on</WWISE_EVENT_1>
			<WWISE_EVENT_2>engine_bleed_switch_off</WWISE_EVENT_2>
			<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
			<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
			<IE_ENG_BLEED_ID>#ID#</IE_ENG_BLEED_ID>
			<TOOLTIP_ENGINE_BLEED_TITLE>@TT_Package.ENGINE_BLEED_TITLE</TOOLTIP_ENGINE_BLEED_TITLE>
			<TT_DESCRIPTION_ID>@TT_Package.ENGINE_BLEED_ACTION</TT_DESCRIPTION_ID>
			<TT_DESCRIPTION_INDEX>#ID#</TT_DESCRIPTION_INDEX>
			<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
		</Parameters>
		<Parameters Type="Override">
			<BTN_ID>Engine_Bleed_#IE_ENG_BLEED_ID#</BTN_ID>
			<Switch Param="AIRLINER_TYPE">
				<Case Value="AIRBUS">
					<SEQ1_EMISSIVE_CODE>0</SEQ1_EMISSIVE_CODE>
					<SEQ2_EMISSIVE_CODE>(A:BLEED AIR ENGINE:#ID#, Bool) !</SEQ2_EMISSIVE_CODE>
				</Case>
				<Case Value="BOEING">
					<SEQ1_EMISSIVE_CODE>(A:BLEED AIR ENGINE:#ID#, Bool)</SEQ1_EMISSIVE_CODE>
					<SEQ2_EMISSIVE_CODE>(A:BLEED AIR ENGINE:#ID#, Bool) !</SEQ2_EMISSIVE_CODE>
				</Case>
			</Switch>
		</Parameters>
		<Parameters Type="Override">
			<SET_STATE_ON>1 #ID# (&gt;K:2:ENGINE_BLEED_AIR_SOURCE_SET)</SET_STATE_ON>
			<SET_STATE_OFF>0 #ID# (&gt;K:2:ENGINE_BLEED_AIR_SOURCE_SET)</SET_STATE_OFF>
			<GET_STATE_EXTERNAL>(A:BLEED AIR ENGINE:#ID#, Bool) sp0</GET_STATE_EXTERNAL>
			<SIM_STATE_IS_ON_EXTERNAL>l0</SIM_STATE_IS_ON_EXTERNAL>
			<SIMVAR_TO_WATCH_0>BLEED AIR ENGINE:#ID#</SIMVAR_TO_WATCH_0>
			<LEFT_SINGLE_CODE>(&gt;B:ELECTRICAL_#BTN_ID#_Toggle)</LEFT_SINGLE_CODE>
			<TOOLTIP_TITLE>#TOOLTIP_ENGINE_BLEED_TITLE#</TOOLTIP_TITLE>
			<TOOLTIP_ENTRY_0>ELECTRICAL_#BTN_ID#</TOOLTIP_ENTRY_0>
		</Parameters>
		<Switch Param="INTERACTION_TYPE">
			<Case Value="Push">
				<Condition NotEmpty="AIRLINER_TYPE">
					<True>
						<UseTemplate Name="ASOBO_GT_Push_Button_Airliner">
							<INPUT_EVENT_ID>ELECTRICAL</INPUT_EVENT_ID>
						</UseTemplate>
					</True>
					<False>
						<Component ID="#NODE_ID#" Node="#NODE_ID#">
							<UseInputEvent ID="ELECTRICAL"/>
							<UseTemplate Name="ASOBO_GT_Push_Button"/>
						</Component>
					</False>
				</Condition>
			</Case>
			<Case Value="Switch">
				<Component ID="#NODE_ID#" Node="#NODE_ID#">
					<UseInputEvent ID="ELECTRICAL">
						<ANIM>EXTERNAL</ANIM>
						<TT_ICON>MOVE_Y</TT_ICON>
					</UseInputEvent>
					<UseTemplate Name="ASOBO_GT_Switch_Code">
						<ANIM_CODE>(B:ELECTRICAL_#BTN_ID#, Bool) 100 *</ANIM_CODE>
					</UseTemplate>
				</Component>
			</Case>
		</Switch>
	</Template>

	<Template Name="ASOBO_ELECTRICAL_Switch_APU_Bleed_SubTemplate">
		<Parameters Type="Default">
			<ANIM_NAME>ELECTRICAL_Switch_APU_Bleed</ANIM_NAME>
			<NODE_ID>ELECTRICAL_Switch_APU_Bleed</NODE_ID>
			<PART_ID>ELECTRICAL_Switch_APU_Bleed</PART_ID>
			<FAULT_NODE_ID>ELECTRICAL_Switch_APU_Bleed_Fault</FAULT_NODE_ID>
			<ON_NODE_ID>ELECTRICAL_Switch_APU_Bleed_On</ON_NODE_ID>
			<WWISE_EVENT_1>apu_bleed_switch_on</WWISE_EVENT_1>
			<WWISE_EVENT_2>apu_bleed_switch_off</WWISE_EVENT_2>
			<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
			<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
			<TOOLTIP_APU_BLEED_TITLE>@TT_Package.CABIN_PRESSURIZATION_SWITCH_BLEED_APU_TITLE</TOOLTIP_APU_BLEED_TITLE>
		</Parameters>
		<Parameters Type="Override">
			<TOOLTIP_TITLE>#TOOLTIP_APU_BLEED_TITLE#</TOOLTIP_TITLE>
			<TOOLTIP_ENTRY_0>ELECTRICAL_APU_Bleed</TOOLTIP_ENTRY_0>
			<LEFT_SINGLE_CODE>(&gt;B:ELECTRICAL_APU_Bleed_Toggle)</LEFT_SINGLE_CODE>
			<Switch Param="TYPE">
				<Case Value="AIRBUS">
					<SEQ1_EMISSIVE_CODE>0</SEQ1_EMISSIVE_CODE>
					<SEQ2_EMISSIVE_CODE>(B:ELECTRICAL_APU_Bleed)</SEQ2_EMISSIVE_CODE>
				</Case>
				<Default>
					<SEQ1_EMISSIVE_CODE>(B:ELECTRICAL_APU_Bleed)</SEQ1_EMISSIVE_CODE>
					<SEQ2_EMISSIVE_CODE>0</SEQ2_EMISSIVE_CODE>
				</Default>
			</Switch>
		</Parameters>
		<UseTemplate Name="ASOBO_GT_Push_Button_Airliner">
			<INPUT_EVENT_ID>ELECTRICAL</INPUT_EVENT_ID>
			<APU_BLEED_ID>1</APU_BLEED_ID>
		</UseTemplate>
	</Template>

	<Template Name="ASOBO_ELECTRICAL_APU_Starter_SubTemplate">
		<Parameters Type="Default">
			<ANIM_NAME>ELECTRICAL_#INTERACTION_TYPE#_APU_Starter</ANIM_NAME>
			<NODE_ID>ELECTRICAL_#INTERACTION_TYPE#_APU_Starter</NODE_ID>
			<PART_ID>ELECTRICAL_Switch_APU_Starter</PART_ID>

			<EXTRA_CONDITION>1</EXTRA_CONDITION>
			<AVAIL_PERCENTAGE>95</AVAIL_PERCENTAGE>
			<WWISE_EVENT>starter_apu_switch</WWISE_EVENT>
			<WWISE_EVENT_1>starter_apu_switch_on</WWISE_EVENT_1>
			<WWISE_EVENT_2>starter_apu_switch_off</WWISE_EVENT_2>
			<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
			<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
			<ID>1</ID>
			<TOOLTIP_APU_STARTER_TITLE>@TT_Package.ELECTRICAL_SWITCH_APU_STARTER_TITLE</TOOLTIP_APU_STARTER_TITLE>
		</Parameters>
		<Parameters Type="Override">
			<TOOLTIP_TITLE>#TOOLTIP_APU_STARTER_TITLE#</TOOLTIP_TITLE>
			<TOOLTIP_ENTRY_0>ELECTRICAL_APU_Starter</TOOLTIP_ENTRY_0>
			<Switch Param="INTERACTION_TYPE">
				<Case Value="SWITCH">
					<Switch Param="NUM_STATES">
						<Case Value="2">
							<ANIM_CODE>(B:ELECTRICAL_APU_Starter) 100 *</ANIM_CODE>
							<LEFT_SINGLE_CODE>(&gt;B:ELECTRICAL_APU_Starter_Toggle)</LEFT_SINGLE_CODE>
							<Condition Valid="MATCH_GEN_TO_STARTER">
								<ON_STATE_CHANGED_EXTERNAL_CODE>
									#ID# (B:ELECTRICAL_APU_Starter) ! (&gt;K:2:APU_GENERATOR_SWITCH_SET)
								</ON_STATE_CHANGED_EXTERNAL_CODE>
							</Condition>
						</Case>
						<Case Value="3">
							<SWITCH_DIRECTION>Horizontal</SWITCH_DIRECTION>
							<ARROW_TYPE>Curved</ARROW_TYPE>
							<MOMENTARY_SWITCH/>
							<STATE_MAX_TIMER>0.5</STATE_MAX_TIMER>
							<STATE0_TIMER>0</STATE0_TIMER>
							<CODE_POS_0>(&gt;K:APU_OFF_SWITCH)</CODE_POS_0>
							<CODE_POS_1/>
							<CODE_POS_2>(&gt;K:APU_STARTER)</CODE_POS_2>
							<STATE0_TEST>0</STATE0_TEST>
							<STATE1_TEST>(A:APU SWITCH, Bool) (#SWITCH_POSITION_TYPE#:#SWITCH_POSITION_VAR#) 2 != and</STATE1_TEST>
							<STATE2_TEST>0</STATE2_TEST>
						</Case>
					</Switch>
				</Case>
				<Case Value="PUSH">
					<SEQ1_EMISSIVE_CODE>(A:APU PCT RPM, Percent) #AVAIL_PERCENTAGE# &gt;=</SEQ1_EMISSIVE_CODE>
					<SEQ2_EMISSIVE_CODE>(A:APU PCT RPM, Percent) 0 &gt; (A:APU PCT RPM, Percent) #AVAIL_PERCENTAGE# &lt; and (A:APU SWITCH, Bool) and</SEQ2_EMISSIVE_CODE>
					<Condition Valid="OVERRIDE_LEFT_SINGLE_CODE">
						<False>							<!-- default -->
							<LEFT_SINGLE_CODE>(&gt;B:ELECTRICAL_APU_Starter_Toggle)</LEFT_SINGLE_CODE>
						</False>
						<True>
							<LEFT_SINGLE_CODE>#OVERRIDE_LEFT_SINGLE_CODE#</LEFT_SINGLE_CODE>
						</True>
					</Condition>

				</Case>
			</Switch>
		</Parameters>

		<Switch Param="INTERACTION_TYPE">
			<Case Value="SWITCH">
				<Component ID="#NODE_ID#" Node="#NODE_ID#">
					<UseInputEvent ID="ELECTRICAL">
						<APU_STARTER_ID>1</APU_STARTER_ID>
					</UseInputEvent>
					<Switch Param="NUM_STATES">
						<Case Value="2">
							<UseTemplate Name="ASOBO_GT_Switch_Code">
							</UseTemplate>
						</Case>
						<Case Value="3">
							<UseTemplate Name="ASOBO_GT_Switch_3States">
							</UseTemplate>
						</Case>
					</Switch>
				</Component>
			</Case>
			<Case Value="PUSH">
				<UseTemplate Name="ASOBO_GT_Push_Button_Airliner">
					<INPUT_EVENT_ID>ELECTRICAL</INPUT_EVENT_ID>
					<APU_STARTER_ID>1</APU_STARTER_ID>
				</UseTemplate>
			</Case>
		</Switch>

		<Condition Valid="ACTIVE_FUEL_PUMP_ON_RPM">
			<True>
				<UseTemplate Name="ASOBO_GT_Update">
					<FREQUENCY>1</FREQUENCY>
					<UPDATE_CODE>
						(A:APU SWITCH, Bool) #ACTIVE_FUEL_PUMP_ON_RPM# (&gt;K:2:FUELSYSTEM_PUMP_SET)
					</UPDATE_CODE>
				</UseTemplate>
			</True>
		</Condition>
	</Template>

	<Template Name="ASOBO_ELECTRICAL_APU_Generator_SubTemplate">
		<Parameters Type="Default">
			<ANIM_NAME>ELECTRICAL_#INTERACTION_TYPE#_APU_Generator</ANIM_NAME>
			<NODE_ID>ELECTRICAL_#INTERACTION_TYPE#_APU_Generator</NODE_ID>
			<PART_ID>ELECTRICAL_Switch_APU_Generator</PART_ID>

			<FAULT_NODE_ID>ELECTRICAL_Switch_APU_Generator_Fault</FAULT_NODE_ID>
			<OFF_NODE_ID>ELECTRICAL_Switch_APU_Generator_Off</OFF_NODE_ID>
			<WWISE_EVENT>apu_generator_switch</WWISE_EVENT>
			<WWISE_EVENT_1>apu_generator_switch_on</WWISE_EVENT_1>
			<WWISE_EVENT_2>apu_generator_switch_off</WWISE_EVENT_2>
			<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
			<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

			<POST_CLICK_CODE></POST_CLICK_CODE>
			<TOOLTIP_APU_GEN_TITLE>@TT_Package.ELECTRICAL_SWITCH_APU_GENERATOR_TITLE</TOOLTIP_APU_GEN_TITLE>
			<GEN_ID>#ID#</GEN_ID>
		</Parameters>
		<Parameters Type="Override">
			<TOOLTIP_TITLE>#TOOLTIP_APU_GEN_TITLE#</TOOLTIP_TITLE>
			<TOOLTIP_ENTRY_0>ELECTRICAL_APU_Generator_#ID#</TOOLTIP_ENTRY_0>
			<Switch Param="TYPE">
				<Case Value="AIRBUS">
					<SEQ1_EMISSIVE_CODE>0</SEQ1_EMISSIVE_CODE>
					<SEQ2_EMISSIVE_CODE>(A:APU GENERATOR SWITCH:#ID#, Bool) !</SEQ2_EMISSIVE_CODE>
				</Case>
				<Case Value="BOEING">
					<SEQ1_EMISSIVE_CODE>(A:APU GENERATOR SWITCH:#ID#, Bool) ! (A:APU PCT RPM, Percent) 95 &gt; and</SEQ1_EMISSIVE_CODE>
					<SEQ2_EMISSIVE_CODE>(A:APU GENERATOR SWITCH:#ID#, Bool) (A:APU PCT RPM, Percent) 95 &gt; and</SEQ2_EMISSIVE_CODE>
					<POST_CLICK_CODE>#POST_CLICK_CODE# (A:APU GENERATOR SWITCH:#ID#, Bool) if{ 0 #ID# (&gt;K:2:SET_EXTERNAL_POWER) } </POST_CLICK_CODE>
				</Case>
				<Case Value="AS01B">
					<SEQ1_EMISSIVE_CODE>(A:APU GENERATOR SWITCH:#ID#, Bool)</SEQ1_EMISSIVE_CODE>
					<SEQ2_EMISSIVE_CODE>(A:APU GENERATOR SWITCH:#ID#, Bool) !</SEQ2_EMISSIVE_CODE>
				</Case>
			</Switch>
			<Switch Param="INTERACTION_TYPE">
				<Case Value="SWITCH">
					<MOMENTARY_SWITCH/>
					<STATE_MAX_TIMER>0.5</STATE_MAX_TIMER>
					<STATE0_TIMER>0</STATE0_TIMER>
					<NONUNIQUE_DEFAULT>0</NONUNIQUE_DEFAULT>
					<SINGLE_ID>1</SINGLE_ID>
					<REST_STATE>1</REST_STATE>
					<NUM_STATES>3</NUM_STATES>
					<CODE_POS_0>
						(A:APU GENERATOR SWITCH:#ID#, Bool) ! if{
							#ID# (&gt;K:APU_GENERATOR_SWITCH_TOGGLE)
						}
						0 (&gt;O:XMLVAR_APU_Reset)
					</CODE_POS_0>
					<CODE_POS_1>
						(A:APU GENERATOR SWITCH:#ID#, Bool) if{
							#ID# (&gt;K:APU_GENERATOR_SWITCH_TOGGLE)
						}
						0 (&gt;O:XMLVAR_APU_Reset)
					</CODE_POS_1>
					<CODE_POS_2>
						(A:APU GENERATOR SWITCH:#ID#, Bool) if{
							#ID# (&gt;K:APU_GENERATOR_SWITCH_TOGGLE)
						}
						1 (&gt;O:XMLVAR_APU_Reset)
					</CODE_POS_2>
					<STATE0_TEST>(A:APU GENERATOR SWITCH:#ID#, bool)</STATE0_TEST>
					<STATE1_TEST>(A:APU GENERATOR SWITCH:#ID#, bool) ! (O:XMLVAR_APU_Reset) ! and</STATE1_TEST>
					<STATE2_TEST>(A:APU GENERATOR SWITCH:#ID#, bool) ! (O:XMLVAR_APU_Reset) and</STATE2_TEST>
				</Case>
				<Case Value="PUSH">
					<LEFT_SINGLE_CODE>#ID# (&gt;B:ELECTRICAL_APU_Generator_#ID#_Toggle) #POST_CLICK_CODE#</LEFT_SINGLE_CODE>
				</Case>
			</Switch>
		</Parameters>

		<Switch Param="INTERACTION_TYPE">
			<Case Value="SWITCH">
				<Component ID="#NODE_ID#" Node="#NODE_ID#">
					<UseInputEvent ID="ELECTRICAL">
						<APU_GEN_ID>#GEN_ID#</APU_GEN_ID>
					</UseInputEvent>
					<UseTemplate Name="ASOBO_GT_Switch_3States">
					</UseTemplate>
				</Component>
			</Case>
			<Case Value="PUSH">
				<UseTemplate Name="ASOBO_GT_Push_Button_Airliner">
					<INPUT_EVENT_ID>ELECTRICAL</INPUT_EVENT_ID>
					<APU_GEN_ID>#GEN_ID#</APU_GEN_ID>
				</UseTemplate>
			</Case>
		</Switch>
	</Template>

	<Template Name="ASOBO_ELECTRICAL_Alternator_SubTemplate">
		<Parameters Type="Default">
			<ANIM_NAME>ELECTRICAL_Switch_Alternator_#ID#</ANIM_NAME>
			<NODE_ID>ELECTRICAL_Switch_Alternator_#ID#</NODE_ID>
			<PART_ID>ELECTRICAL_Switch_Alternator</PART_ID>
			<ENGINE_ID>#ID#</ENGINE_ID>
			<Switch Param="TYPE">
				<Case Value="RESET_ON_TRIP">
					<POS_RESET>0</POS_RESET>
					<POS_ON>1</POS_ON>
					<POS_TRIP>2</POS_TRIP>
				</Case>
				<Case Value="ON_OFF_RESET">
					<POS_ON>0</POS_ON>
					<POS_OFF>1</POS_OFF>
					<POS_RESET>2</POS_RESET>
				</Case>
				<Case Value="STBY_MAIN_OFF">
					<POS_STBY>0</POS_STBY>
					<POS_MAIN>1</POS_MAIN>
					<POS_OFF>2</POS_OFF>
				</Case>
			</Switch>
			<TOOLTIP_TITLE>@TT_Package.ELECTRICAL_ALTERNATOR_TITLE</TOOLTIP_TITLE>
			<TT_DESCRIPTION_ID>@TT_Package.ELECTRICAL_ALTERNATOR_ACTION_SET_SOLO</TT_DESCRIPTION_ID>
		</Parameters>
		<Parameters Type="Override">
			<TOOLTIP_ENTRY_0>ELECTRICAL_Alternator_#ID#</TOOLTIP_ENTRY_0>
			<Switch Param="INTERACTION_TYPE">
				<Case Value="PUSH">
					<NUM_STATES>2</NUM_STATES>
					<Switch Param="TYPE">
						<Case Value="AIRBUS">
							<SEQ1_EMISSIVE_CODE>(A:GENERAL ENG MASTER ALTERNATOR:#ID#, bool) (A:GENERAL ENG PCT MAX RPM:#ENGINE_ID#, Percent) 1 &lt; and</SEQ1_EMISSIVE_CODE>
							<SEQ2_EMISSIVE_CODE>(A:GENERAL ENG MASTER ALTERNATOR:#ID#, Bool) !</SEQ2_EMISSIVE_CODE>
						</Case>
						<Case Value="BOEING">
							<SEQ1_EMISSIVE_CODE>(A:GENERAL ENG MASTER ALTERNATOR:#ID#, bool)</SEQ1_EMISSIVE_CODE>
							<SEQ2_EMISSIVE_CODE>(A:GENERAL ENG MASTER ALTERNATOR:#ID#, Bool) ! (A:GENERAL ENG COMBUSTION:#ENGINE_ID#, Bool) ! or</SEQ2_EMISSIVE_CODE>
						</Case>
						<Case Value="AS02A">
							<SEQ1_EMISSIVE_CODE>(A:GENERAL ENG MASTER ALTERNATOR:#ID#, bool) (A:GENERAL ENG PCT MAX RPM:#ENGINE_ID#, Percent) 1 &lt; and</SEQ1_EMISSIVE_CODE>
							<SEQ2_EMISSIVE_CODE>(A:GENERAL ENG MASTER ALTERNATOR:#ID#, Bool) !</SEQ2_EMISSIVE_CODE>
						</Case>
					</Switch>
				</Case>
				<Case Value="SWITCH">
					<TT_ICON>MOVE_Y</TT_ICON>
					<Switch Param="TYPE">
						<Case Value="RESET_ON_TRIP">
							<NUM_STATES>3</NUM_STATES>
							<MOMENTARY_SWITCH/>
							<STATE_MAX_TIMER>0.5</STATE_MAX_TIMER>
							<STATE0_TIMER>0.5</STATE0_TIMER>
							<ALTERNATOR_UPDATE_CODE>(O:XMLVAR_Alternator_Reset_Trip) 0 == (A:GENERAL ENG MASTER ALTERNATOR:#ID#, bool) ! and if{ (&gt;K:TOGGLE_ALTERNATOR#ID#) }</ALTERNATOR_UPDATE_CODE>
							<SET_STATE_#POS_RESET#>(A:GENERAL ENG MASTER ALTERNATOR:#ID#, bool) ! if{ (&gt;K:TOGGLE_ALTERNATOR#ID#) } 1 (&gt;O:XMLVAR_Alternator_Reset_Trip)</SET_STATE_#POS_RESET#>
							<SET_STATE_#POS_ON#>(A:GENERAL ENG MASTER ALTERNATOR:#ID#, bool) ! if{ (&gt;K:TOGGLE_ALTERNATOR#ID#) } 0 (&gt;O:XMLVAR_Alternator_Reset_Trip)</SET_STATE_#POS_ON#>
							<SET_STATE_#POS_TRIP#>(A:GENERAL ENG MASTER ALTERNATOR:#ID#, bool) if{ (&gt;K:TOGGLE_ALTERNATOR#ID#) } 2 (&gt;O:XMLVAR_Alternator_Reset_Trip)</SET_STATE_#POS_TRIP#>
							<TT_VALUE_#POS_RESET#>@TT_Package.GT_STATE_RESET</TT_VALUE_#POS_RESET#>
							<TT_VALUE_#POS_ON#>@TT_Package.GT_STATE_ON</TT_VALUE_#POS_ON#>
							<TT_VALUE_#POS_TRIP#>@TT_Package.GT_STATE_TRIP</TT_VALUE_#POS_TRIP#>
							<GET_STATE_EXTERNAL>(A:GENERAL ENG MASTER ALTERNATOR:#ID#, bool) sp0 (O:XMLVAR_Alternator_Reset_Trip) sp1</GET_STATE_EXTERNAL>
							<ENUM_VAL_TO_POS_EXTERNAL>#POS_ON# sp2 l0 if{ #POS_ON# sp2 g2 } els{ #POS_RESET# #POS_TRIP# (O:XMLVAR_Alternator_Reset_Trip) 1 == ? sp2 g2 } :2 l2</ENUM_VAL_TO_POS_EXTERNAL>
						</Case>
						<Case Value="ON_OFF_RESET">
							<NUM_STATES>3</NUM_STATES>
							<MOMENTARY_SWITCH/>
							<STATE_MAX_TIMER>0.5</STATE_MAX_TIMER>
							<STATE0_TIMER>0</STATE0_TIMER>
							<SET_STATE_#POS_ON#>(A:GENERAL ENG MASTER ALTERNATOR:#ID#, bool) ! if{ (&gt;K:TOGGLE_ALTERNATOR#ID#) } 0 (&gt;O:XMLVAR_Alternator_#ID#_Reset)</SET_STATE_#POS_ON#>
							<SET_STATE_#POS_OFF#>(A:GENERAL ENG MASTER ALTERNATOR:#ID#, bool) if{ (&gt;K:TOGGLE_ALTERNATOR#ID#) } 0 (&gt;O:XMLVAR_Alternator_#ID#_Reset)</SET_STATE_#POS_OFF#>
							<SET_STATE_#POS_RESET#>(A:GENERAL ENG MASTER ALTERNATOR:#ID#, bool) if{ (&gt;K:TOGGLE_ALTERNATOR#ID#) } 1 (&gt;O:XMLVAR_Alternator_#ID#_Reset)</SET_STATE_#POS_RESET#>
							<TT_VALUE_#POS_ON#>@TT_Package.GT_STATE_ON</TT_VALUE_#POS_ON#>
							<TT_VALUE_#POS_OFF#>@TT_Package.GT_STATE_OFF</TT_VALUE_#POS_OFF#>
							<TT_VALUE_#POS_RESET#>@TT_Package.GT_STATE_RESET</TT_VALUE_#POS_RESET#>
							<GET_STATE_EXTERNAL>(A:GENERAL ENG MASTER ALTERNATOR:#ID#, bool) sp0 (O:XMLVAR_Alternator_#ID#_Reset) sp1</GET_STATE_EXTERNAL>
							<ENUM_VAL_TO_POS_EXTERNAL>#POS_OFF# sp2 l0 if{ #POS_ON# sp2 g2 } els{ #POS_RESET# #POS_OFF# l1 ? sp2 g2 } :2 l2</ENUM_VAL_TO_POS_EXTERNAL>
						</Case>
						<Case Value="STBY_MAIN_OFF">
							<NUM_STATES>3</NUM_STATES>
							<SET_STATE_#POS_STBY#>(A:GENERAL ENG MASTER ALTERNATOR:#ID#, bool) ! if{ (&gt;K:TOGGLE_ALTERNATOR#ID#) } 1 (&gt;O:XMLVAR_ELECTRICAL_Generator_Standby_ON)</SET_STATE_#POS_STBY#>
							<SET_STATE_#POS_MAIN#>(A:GENERAL ENG MASTER ALTERNATOR:#ID#, bool) ! if{ (&gt;K:TOGGLE_ALTERNATOR#ID#) } 0 (&gt;O:XMLVAR_ELECTRICAL_Generator_Standby_ON)</SET_STATE_#POS_MAIN#>
							<SET_STATE_#POS_OFF#>(A:GENERAL ENG MASTER ALTERNATOR:#ID#, bool) if{ (&gt;K:TOGGLE_ALTERNATOR#ID#) } 0 (&gt;O:XMLVAR_ELECTRICAL_Generator_Standby_ON)</SET_STATE_#POS_OFF#>
							<TT_VALUE_#POS_STBY#>@TT_Package.GT_STATE_STANDBY</TT_VALUE_#POS_STBY#>
							<TT_VALUE_#POS_MAIN#>@TT_Package.GT_STATE_MAIN</TT_VALUE_#POS_MAIN#>
							<TT_VALUE_#POS_OFF#>@TT_Package.GT_STATE_OFF</TT_VALUE_#POS_OFF#>
							<GET_STATE_EXTERNAL>(A:GENERAL ENG MASTER ALTERNATOR:#ID#, bool) sp0 (O:XMLVAR_ELECTRICAL_Generator_Standby_ON) sp1</GET_STATE_EXTERNAL>
							<ENUM_VAL_TO_POS_EXTERNAL>#POS_OFF# sp2 l0 if{ #POS_STBY# #POS_MAIN# l1 ? sp2 g2 } els{ #POS_OFF# sp2 g2 } :2 l2</ENUM_VAL_TO_POS_EXTERNAL>
						</Case>
						<Default>
							<NUM_STATES>2</NUM_STATES>
						</Default>
					</Switch>
				</Case>
			</Switch>
		</Parameters>
		<Parameters Type="Default">
			<Switch Param="NUM_STATES">
				<Case Value="2">
					<WWISE_EVENT_1>alternator_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>alternator_switch_off</WWISE_EVENT_2>
				</Case>
				<Case Value="3">
					<WWISE_EVENT>alternator_switch</WWISE_EVENT>
				</Case>
			</Switch>
		</Parameters>
		<Parameters Type="Override">
			<BTN_ID>Alternator_#ID#</BTN_ID>
			<SIMVAR_TO_WATCH_0>GENERAL ENG MASTER ALTERNATOR:#ID#</SIMVAR_TO_WATCH_0>
			<Switch Param="NUM_STATES">
				<Case Value="3">
					<Switch Param="TYPE">
						<Case Value="RESET_ON_TRIP">
							<POS_0>#POS_RESET#</POS_0>
							<ID_POS_0>Reset</ID_POS_0>
							<POS_1>#POS_ON#</POS_1>
							<ID_POS_1>On</ID_POS_1>
							<POS_2>#POS_TRIP#</POS_2>
							<ID_POS_2>Trip</ID_POS_2>
						</Case>
						<Case Value="ON_OFF_RESET">
							<POS_0>#POS_ON#</POS_0>
							<ID_POS_0>On</ID_POS_0>
							<POS_1>#POS_OFF#</POS_1>
							<ID_POS_1>Off</ID_POS_1>
							<POS_2>#POS_RESET#</POS_2>
							<ID_POS_2>Reset</ID_POS_2>
						</Case>
						<Case Value="STBY_MAIN_OFF">
							<POS_0>#POS_STBY#</POS_0>
							<ID_POS_0>Standby</ID_POS_0>
							<POS_1>#POS_MAIN#</POS_1>
							<ID_POS_1>Main</ID_POS_1>
							<POS_2>#POS_OFF#</POS_2>
							<ID_POS_2>Off</ID_POS_2>
						</Case>
					</Switch>
				</Case>
				<Case Value="2">
					<SET_STATE_EXTERNAL>p0 (A:GENERAL ENG MASTER ALTERNATOR:#ID#, Bool) != if{ #ID# p0 (&gt;K:2:ALTERNATOR_SET) }</SET_STATE_EXTERNAL>
					<GET_STATE_EXTERNAL>(A:GENERAL ENG MASTER ALTERNATOR:#ID#, Bool) sp0</GET_STATE_EXTERNAL>
					<SIM_STATE_IS_ON_EXTERNAL>l0</SIM_STATE_IS_ON_EXTERNAL>
				</Case>
			</Switch>
		</Parameters>
		<Switch Param="INTERACTION_TYPE">
			<Case Value="PUSH">
				<UseTemplate Name="ASOBO_GT_Push_Button_Airliner">
					<INPUT_EVENT_ID>ELECTRICAL</INPUT_EVENT_ID>
					<LEFT_SINGLE_CODE>(&gt;B:ELECTRICAL_#BTN_ID#_Toggle)</LEFT_SINGLE_CODE>
				</UseTemplate>
			</Case>
			<Case Value="SWITCH">
				<Component ID="#NODE_ID#" Node="#NODE_ID#">
					<Condition NotEmpty="ALTERNATOR_UPDATE_CODE">
						<UseTemplate Name="ASOBO_GT_Update">
							<UPDATE_CODE>#ALTERNATOR_UPDATE_CODE#</UPDATE_CODE>
						</UseTemplate>
					</Condition>
					<UseInputEvent ID="ELECTRICAL">
						<ANIM>EXTERNAL</ANIM>
						<Switch Param="NUM_STATES">
							<Case Value="3">
								<STR_STATE_#POS_0#>#ID_POS_0#</STR_STATE_#POS_0#>
								<STR_STATE_#POS_1#>#ID_POS_1#</STR_STATE_#POS_1#>
								<STR_STATE_#POS_2#>#ID_POS_2#</STR_STATE_#POS_2#>
							</Case>
						</Switch>
					</UseInputEvent>
					<Switch Param="NUM_STATES">
						<Case Value="2">
							<UseTemplate Name="ASOBO_GT_Switch_Code">
								<LEFT_SINGLE_CODE>(&gt;B:ELECTRICAL_#BTN_ID#_Toggle)</LEFT_SINGLE_CODE>
								<ANIM_CODE>(B:ELECTRICAL_#BTN_ID#, Bool) 100 *</ANIM_CODE>
							</UseTemplate>
						</Case>
						<Case Value="3">
							<UseTemplate Name="ASOBO_GT_Switch_XStates">
								<CODE_POS_#POS_0#>(&gt;B:ELECTRICAL_#BTN_ID#_#ID_POS_0#)</CODE_POS_#POS_0#>
								<CODE_POS_#POS_1#>(&gt;B:ELECTRICAL_#BTN_ID#_#ID_POS_1#)</CODE_POS_#POS_1#>
								<CODE_POS_#POS_2#>(&gt;B:ELECTRICAL_#BTN_ID#_#ID_POS_2#)</CODE_POS_#POS_2#>
								<STATE#POS_0#_TEST>(B:ELECTRICAL_#BTN_ID#) #POS_0# ==</STATE#POS_0#_TEST>
								<STATE#POS_1#_TEST>(B:ELECTRICAL_#BTN_ID#) #POS_1# ==</STATE#POS_1#_TEST>
								<STATE#POS_2#_TEST>(B:ELECTRICAL_#BTN_ID#) #POS_2# ==</STATE#POS_2#_TEST>
							</UseTemplate>
						</Case>
					</Switch>
				</Component>
			</Case>
		</Switch>
	</Template>

	<!--
	Note: The SWITCH_3States version has bugs in its <GET_STATE_EXTERNAL> and <SET_*_CONNECTION> codes:
	it uses SimVar and Keys for *Circuit* instead of *Bus* in some places.
	It's advised to override those when using the template.
	-->
	<Template Name="ASOBO_ELECTRICAL_ExternalPower_Template">
		<Parameters Type="Default">
			<Switch Param="INTERACTION_TYPE">
				<Case Value="SWITCH">
					<Switch Param="NUM_STATES">
						<Case Value="2">
							<TYPE>SWITCH_2States</TYPE>
						</Case>
						<Case Value="3">
							<TYPE>SWITCH_3States</TYPE>
						</Case>
					</Switch>
				</Case>
			</Switch>
		</Parameters>
		<Parameters Type="Default">
			<PART_ID>ELECTRICAL_Switch_ExternalPower</PART_ID>
			<ANIM_NAME>ELECTRICAL_Switch_ExternalPower_#ID#</ANIM_NAME>
			<NODE_ID>ELECTRICAL_Switch_ExternalPower_#ID#</NODE_ID>
			<Switch Param="INTERACTION_TYPE">
				<Case Value="PUSH">
					<Switch Param="TYPE">
						<Case Value="AIRBUS">
						</Case>
						<Case Value="BOEING">
							<SWAP_SEQ_CONDITION>False</SWAP_SEQ_CONDITION>
						</Case>
					</Switch>
				</Case>
				<Case Value="SWITCH">
					<Switch Param="TYPE">
						<Case Value="SWITCH_3States">
							<COVER_NODE_ID>ELECTRICAL_Switch_ExternalPower_#ID#_Cover</COVER_NODE_ID>
							<COVER_ANIM_NAME>ELECTRICAL_Switch_ExternalPower_#ID#_Cover</COVER_ANIM_NAME>
							<GET_STATE_EXTERNAL>
								12 (A:1:BUS CONNECTION ON:1, Bool) sp1
								12 (A:1:CIRCUIT CONNECTION ON:11, Bool) sp2
								1 (A:1:CIRCUIT CONNECTION ON:11, Bool) sp3
							</GET_STATE_EXTERNAL>
							<SET_EXTPWR_MAIN_BUS_CONNECTION>l1 != if{ 1 12 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) }</SET_EXTPWR_MAIN_BUS_CONNECTION>
							<SET_EXTPWR_STARTER_CONNECTION>l2 != if{ 11 12 (&gt;K:2:ELECTRICAL_BUS_TO_CIRCUIT_CONNECTION_TOGGLE) }</SET_EXTPWR_STARTER_CONNECTION>
							<SET_STARTER_MAIN_BUS_CONNECTION>l3 != if{ 11 1 (&gt;K:2:ELECTRICAL_BUS_TO_CIRCUIT_CONNECTION_TOGGLE) }</SET_STARTER_MAIN_BUS_CONNECTION>
						</Case>
					</Switch>
				</Case>
			</Switch>
			<POST_CLICK_CODE></POST_CLICK_CODE>
			<EXTPWR_ID>#ID#</EXTPWR_ID>
			<TOOLTIP_EXTPWR_TITLE>@TT_Package.ELECTRICAL_SWITCH_EXTERNAL_POWER_TITLE</TOOLTIP_EXTPWR_TITLE>
			<TT_EXTPWR_DESCRIPTION_ID>@TT_Package.ELECTRICAL_EXTERNAL_POWER_ACTION_SET</TT_EXTPWR_DESCRIPTION_ID>
		</Parameters>
		<Parameters Type="Override">
			<Condition Check="TYPE" Match="AS04F">
				<False>
					<TOOLTIP_ENTRY_0>ELECTRICAL_ExternalPower_#ID#</TOOLTIP_ENTRY_0>
				</False>
			</Condition>
			<TOOLTIP_TITLE>#TOOLTIP_EXTPWR_TITLE#</TOOLTIP_TITLE>
			<Switch Param="INTERACTION_TYPE">
				<Case Value="PUSH">
					<LEFT_SINGLE_CODE>(&gt;B:ELECTRICAL_ExternalPower_#EXTPWR_ID#_Toggle)</LEFT_SINGLE_CODE>
					<WWISE_EVENT_1>externalpower_push_button_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>externalpower_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
					<Switch Param="TYPE">
						<Case Value="AIRBUS">
							<SEQ1_EMISSIVE_CODE>(A:EXTERNAL POWER AVAILABLE:#ID#, Bool) (A:EXTERNAL POWER ON:#ID#, Bool) ! and</SEQ1_EMISSIVE_CODE>
							<SEQ2_EMISSIVE_CODE>(A:EXTERNAL POWER AVAILABLE:#ID#, Bool) (A:EXTERNAL POWER ON:#ID#, Bool) and</SEQ2_EMISSIVE_CODE>
						</Case>
						<Case Value="BOEING">
							<ON_STATE_CHANGED>
								#POST_CLICK_CODE# 
								(A:EXTERNAL POWER AVAILABLE:#ID#, Bool) (A:EXTERNAL POWER ON:#ID#, Bool) and if{
									(A:EXTERNAL POWER ON:#ID#, Bool) if{ #ID# 0 (&gt;K:2:APU_GENERATOR_SWITCH_SET) } 
								}
							</ON_STATE_CHANGED>
							<DOWN_STATE_CODE>(B:ELECTRICAL_ExternalPower_#EXTPWR_ID#)</DOWN_STATE_CODE>
							<Switch Param="VARIANT">
								<Case Value="747">
									<SEQ1_EMISSIVE_CODE>(A:EXTERNAL POWER AVAILABLE:#ID#, Bool) (B:ELECTRICAL_ExternalPower_#EXTPWR_ID#) ! and</SEQ1_EMISSIVE_CODE>
									<SEQ2_EMISSIVE_CODE>(A:EXTERNAL POWER AVAILABLE:#ID#, Bool) (B:ELECTRICAL_ExternalPower_#EXTPWR_ID#) and</SEQ2_EMISSIVE_CODE>
								</Case>
								<Default>
									<SEQ1_EMISSIVE_CODE>(A:EXTERNAL POWER AVAILABLE:#ID#, Bool) (B:ELECTRICAL_ExternalPower_#EXTPWR_ID#) and</SEQ1_EMISSIVE_CODE>
									<SEQ2_EMISSIVE_CODE>(A:EXTERNAL POWER AVAILABLE:#ID#, Bool) (B:ELECTRICAL_ExternalPower_#EXTPWR_ID#) ! and</SEQ2_EMISSIVE_CODE>
								</Default>
							</Switch>
						</Case>
					</Switch>
				</Case>
				<Case Value="SWITCH">
					<Switch Param="TYPE">
						<Case Value="SWITCH_2States">
							<LEFT_SINGLE_CODE>(&gt;B:ELECTRICAL_ExternalPower_#EXTPWR_ID#_Toggle)</LEFT_SINGLE_CODE>
							<ANIM_CODE>(B:ELECTRICAL_ExternalPower_#EXTPWR_ID#) 100 *</ANIM_CODE>
							<WWISE_EVENT_1>externalpower_switch_on</WWISE_EVENT_1>
							<WWISE_EVENT_2>externalpower_switch_off</WWISE_EVENT_2>
						</Case>
						<Case Value="SWITCH_3States">
							<SWITCH_NODE_ID>#NODE_ID#</SWITCH_NODE_ID>
							<SWITCH_ANIM_NAME>#ANIM_NAME#</SWITCH_ANIM_NAME>
							<COVER_VAR_NAME>XMLVAR_ELECTRICAL_ExternalPower_#EXTPWR_ID#_Cover_Opened</COVER_VAR_NAME>
							<WWISE_EVENT>externalpower_switch</WWISE_EVENT>
							<BTN_ID>ExternalPower_#EXTPWR_ID#</BTN_ID>
							<EXTPWR_ID/>
						</Case>
					</Switch>
				</Case>
			</Switch>
		</Parameters>

		<Switch Param="INTERACTION_TYPE">
			<Case Value="PUSH">
				<UseTemplate Name="ASOBO_GT_Push_Button_Airliner">
					<INPUT_EVENT_ID>ELECTRICAL</INPUT_EVENT_ID>
					<Condition Valid="SWAP_SEQ_CONDITION">
						<SEQ1_EMISSIVE_CODE>#SEQ2_EMISSIVE_CODE#</SEQ1_EMISSIVE_CODE>
						<SEQ2_EMISSIVE_CODE>#SEQ1_EMISSIVE_CODE#</SEQ2_EMISSIVE_CODE>
					</Condition>
				</UseTemplate>
			</Case>
			<Case Value="SWITCH">
				<Switch Param="TYPE">
					<Case Value="SWITCH_2States">
						<Component ID="#NODE_ID#" Node="#NODE_ID#">
							<UseInputEvent ID="ELECTRICAL"/>
							<UseTemplate Name="ASOBO_GT_Switch_Code"/>
						</Component>
					</Case>
					<Case Value="SWITCH_3States">
						<Component ID="ELECTRICAL_ExternalPower">
							<UseTemplate Name="ASOBO_GT_Switch_Covered">
								<NUM_STATES>3</NUM_STATES>
								<INPUT_EVENT_ID>ELECTRICAL</INPUT_EVENT_ID>
								<COVER_IE_NAME>#BTN_ID#_Cover</COVER_IE_NAME>
								<COVER_IE_ID_SOURCE>ELECTRICAL</COVER_IE_ID_SOURCE>
								<CODE_POS_0>(&gt;B:ELECTRICAL_#BTN_ID#_Bus)</CODE_POS_0>
								<CODE_POS_1>(&gt;B:ELECTRICAL_#BTN_ID#_Starter)</CODE_POS_1>
								<CODE_POS_2>(&gt;B:ELECTRICAL_#BTN_ID#_Off)</CODE_POS_2>
								<STATE0_TEST>(B:ELECTRICAL_#BTN_ID#, Number) 0 ==</STATE0_TEST>
								<STATE1_TEST>(B:ELECTRICAL_#BTN_ID#, Number) 1 ==</STATE1_TEST>
								<STATE2_TEST>(B:ELECTRICAL_#BTN_ID#, Number) 2 ==</STATE2_TEST>
								<STR_STATE_0>Bus</STR_STATE_0>
								<STR_STATE_1>Starter</STR_STATE_1>
								<STR_STATE_2>Off</STR_STATE_2>
								<TT_VALUE_0>@TT_Package.GT_STATE_BUS</TT_VALUE_0>
								<TT_VALUE_1>@TT_Package.GT_STATE_STARTER</TT_VALUE_1>
								<TT_VALUE_2>@TT_Package.GT_STATE_OFF</TT_VALUE_2>
								<SET_STATE_0>
									(A:EXTERNAL POWER ON:#ID#, Bool) ! if{ #ID# (&gt;K:TOGGLE_EXTERNAL_POWER) }
									1 #SET_EXTPWR_MAIN_BUS_CONNECTION#
									0 #SET_EXTPWR_STARTER_CONNECTION#
									1 #SET_STARTER_MAIN_BUS_CONNECTION#
								</SET_STATE_0>
								<SET_STATE_1>
									(A:EXTERNAL POWER ON:#ID#, Bool) ! if{ #ID# (&gt;K:TOGGLE_EXTERNAL_POWER) }
									0 #SET_EXTPWR_MAIN_BUS_CONNECTION#
									1 #SET_EXTPWR_STARTER_CONNECTION#
									0 #SET_STARTER_MAIN_BUS_CONNECTION#
								</SET_STATE_1>
								<SET_STATE_2>
									(A:EXTERNAL POWER ON:#ID#, Bool) if{ #ID# (&gt;K:TOGGLE_EXTERNAL_POWER) }
									0 #SET_EXTPWR_MAIN_BUS_CONNECTION#
									0 #SET_EXTPWR_STARTER_CONNECTION#
									0 #SET_STARTER_MAIN_BUS_CONNECTION#
								</SET_STATE_2>
								<TOOLTIP_TITLE>@TT_Package.ELECTRICAL_EXTERNAL_POWER_TITLE</TOOLTIP_TITLE>
								<TOOLTIP_ENTRY_0>ELECTRICAL_#BTN_ID#</TOOLTIP_ENTRY_0>
								<TT_DESCRIPTION_ID>#TT_EXTPWR_DESCRIPTION_ID#</TT_DESCRIPTION_ID>
								<ON_BEFORE_SET_CODE>#GET_STATE_EXTERNAL# </ON_BEFORE_SET_CODE>
								<ENUM_VAL_TO_POS_EXTERNAL>(A:EXTERNAL POWER ON:#ID#, Bool) if{ l1 l2 ! and l3 and if{ 0 sp4 g2 } els{ 1 sp4 g2 } } els{ 2 sp4 g2 } :2 l4</ENUM_VAL_TO_POS_EXTERNAL>
								<SIMVAR_TO_WATCH_0>EXTERNAL POWER ON:#ID#</SIMVAR_TO_WATCH_0>
							</UseTemplate>
						</Component>
					</Case>
					<Case Value="AS04F">
						<Component ID="#NODE_ID#_Parent">
							<Parameters Type="Default">
								<TT_DESCRIPTION_ID>@TT_Package.ELECTRICAL_EXTERNAL_POWER_ACTION_SET</TT_DESCRIPTION_ID>
							</Parameters>
							<Parameters Type="Override">
								<NUM_STATES>3</NUM_STATES>
								<POS_RESET>0</POS_RESET>
								<POS_NORM>1</POS_NORM>
								<POS_OFF>2</POS_OFF>
								<EXTPWR_ID/>
							</Parameters>
							<UseTemplate Name="ASOBO_Electrical_Base_Template">
								<IE_NAME>External_Power</IE_NAME>
								<GET_STATE_EXTERNAL>(A:EXTERNAL POWER ON:#ID#, bool) sp0</GET_STATE_EXTERNAL>

								<SET_STATE_#POS_RESET#>
									1 #ID# (&gt;K:2:SET_EXTERNAL_POWER)
								</SET_STATE_#POS_RESET#>
								<SET_STATE_#POS_NORM#></SET_STATE_#POS_NORM#>
								<SET_STATE_#POS_OFF#>
									0 #ID# (&gt;K:2:SET_EXTERNAL_POWER)
								</SET_STATE_#POS_OFF#>

								<STR_STATE_#POS_RESET#>Reset</STR_STATE_#POS_RESET#>
								<STR_STATE_#POS_NORM#>Norm</STR_STATE_#POS_NORM#>
								<STR_STATE_#POS_OFF#>Off</STR_STATE_#POS_OFF#>

								<TT_VALUE_#POS_RESET#>@TT_Package.GT_STATE_RESET</TT_VALUE_#POS_RESET#>
								<TT_VALUE_#POS_NORM#>@TT_Package.GT_STATE_MODENORM</TT_VALUE_#POS_NORM#>
								<TT_VALUE_#POS_OFF#>@TT_Package.GT_STATE_OFF</TT_VALUE_#POS_OFF#>

								<MOMENTARY_SWITCH/>
								<STATE0_TIMER>0.01</STATE0_TIMER>
								<STATE_MAX_TIMER>0</STATE_MAX_TIMER>
							</UseTemplate>
						</Component>
					</Case>
				</Switch>
			</Case>
		</Switch>
	</Template>

	<Template Name="ASOBO_ELECTRICAL_Push_BatteryCharge_SubTemplate">
		<DefaultTemplateParameters>
			<PART_ID>ELECTRICAL_Push_BatteryCharge</PART_ID>
			<ANIM_NAME>ELECTRICAL_Push_BatteryCharge_#ID#</ANIM_NAME>
			<NODE_ID>ELECTRICAL_Push_BatteryCharge_#ID#</NODE_ID>
			<WWISE_EVENT_1>batterycharge_push_button_on</WWISE_EVENT_1>
			<WWISE_EVENT_2>batterycharge_push_button_off</WWISE_EVENT_2>
		</DefaultTemplateParameters>

		<Component ID="#NODE_ID#" Node="#NODE_ID#">
			<UseTemplate Name="ASOBO_GT_Update">
				<FREQUENCY>5</FREQUENCY>
				<UPDATE_CODE>
					#CHARGE_BUS_ID# (A:1:BUS CONNECTION ON:#HOT_BATTERY_BUS_ID#, Bool)				
					(L:XMLVAR_BatteryChargeDisabled_#ID#) == if{
							#CHARGE_BUS_ID# #HOT_BATTERY_BUS_ID# (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
					}
				</UPDATE_CODE>
			</UseTemplate>

			<UseTemplate Name = "ASOBO_GT_Push_Button_Airliner">
				<LEFT_SINGLE_CODE>(L:XMLVAR_BatteryChargeDisabled_#ID#) ! (&gt;L:XMLVAR_BatteryChargeDisabled_#ID#)</LEFT_SINGLE_CODE>
				<SEQ1_EMISSIVE_CODE>0</SEQ1_EMISSIVE_CODE>
				<SEQ2_EMISSIVE_CODE>(L:XMLVAR_BatteryChargeDisabled_#ID#)</SEQ2_EMISSIVE_CODE>
			</UseTemplate>
		</Component>
	</Template>

	<Template Name="ASOBO_ELECTRICAL_Emissive_Battery_Discharge_SubTemplate">
		<DefaultTemplateParameters>
			<NODE_ID>ELECTRICAL_Emissive_Battery_Discharge_#ID#</NODE_ID>
		</DefaultTemplateParameters>

		<UseTemplate Name="ASOBO_GT_Component_Emissive_Gauge">
			<EMISSIVE_CODE>(A:ELECTRICAL BATTERY LOAD:#ID#, Amps) 0 &gt;</EMISSIVE_CODE>
		</UseTemplate>
	</Template>

	<Template Name="ASOBO_ELECTRICAL_Starter_Template">
		<Parameters Type="Default">
			<ANIM_NAME>ELECTRICAL_#INTERACTION_TYPE#_Starter_#ID#</ANIM_NAME>
			<NODE_ID>ELECTRICAL_#INTERACTION_TYPE#_Starter_#ID#</NODE_ID>
			<PART_ID>ELECTRICAL_#INTERACTION_TYPE#_Starter</PART_ID>
			<MOMENTARY_MIN_DURATION>1.5</MOMENTARY_MIN_DURATION>
			<Condition Valid="COVERED">
				<COVER_NODE_ID>ELECTRICAL_#INTERACTION_TYPE#_Starter_#ID#_Cover</COVER_NODE_ID>
				<COVER_ANIM_NAME>ELECTRICAL_#INTERACTION_TYPE#_Starter_#ID#_Cover</COVER_ANIM_NAME>
			</Condition>
			<STARTER_ID>#ID#</STARTER_ID>
			<TOOLTIP_STARTER_TITLE>@TT_Package.ELECTRICAL_PUSH_START_TITLE</TOOLTIP_STARTER_TITLE>
		</Parameters>
		<Parameters Type="Override">
			<TOOLTIP_TITLE>#TOOLTIP_STARTER_TITLE#</TOOLTIP_TITLE>
			<TOOLTIP_ENTRY_0>ELECTRICAL_Starter_#ID#</TOOLTIP_ENTRY_0>
			<Switch>
				<Case Valid="USE_ENFORCED_MOMENTARY_MIN_DURATION">
					<STOP_STARTER>(O:_Interacting) ! if{ 0 (&gt;K:SET_STARTER#ID#_HELD) }</STOP_STARTER>
				</Case>
				<Default>
					<STOP_STARTER>0 (&gt;K:SET_STARTER#ID#_HELD)</STOP_STARTER>
				</Default>
			</Switch>
			<Condition Valid="PREVENT_STARTER_RELEASE">
				<True>
					<RELEASE_STARTER_CODE></RELEASE_STARTER_CODE>
				</True>
				<False>
					<Switch Param="INTERACTION_TYPE">
						<Case Value="SWITCH">
							<RELEASE_STARTER_CODE>0 (&gt;B:ELECTRICAL_Starter_#ID#_Off)</RELEASE_STARTER_CODE>
						</Case>
						<Case Value="PUSH">
							<RELEASE_STARTER_CODE>0 (&gt;B:ELECTRICAL_Starter_#ID#_Set)</RELEASE_STARTER_CODE>
						</Case>
					</Switch>
				</False>
			</Condition>
		</Parameters>
		<Parameters Type="Default">			<!-- fix name duplication -->
			<Condition Valid="COVERED">
				<LOCK_NODE_ID>#COVER_NODE_ID#</LOCK_NODE_ID>
				<LOCK_ANIM_NAME>#COVER_ANIM_NAME#</LOCK_ANIM_NAME>
			</Condition>
		</Parameters>

		<Switch Param="INTERACTION_TYPE">
			<Case Value="SWITCH">
				<Condition Valid="COVERED">*
					<True>
						<UseTemplate Name="ASOBO_GT_Switch_Covered">
							<INPUT_EVENT_ID>ELECTRICAL</INPUT_EVENT_ID>
							<COVER_IE_NAME>Starter_#ID#_Cover</COVER_IE_NAME>
							<COVER_IE_ID_SOURCE>ELECTRICAL</COVER_IE_ID_SOURCE>
							<SWITCH_NODE_ID>#NODE_ID#</SWITCH_NODE_ID>
							<SWITCH_ANIM_NAME>#ANIM_NAME#</SWITCH_ANIM_NAME>
							<COVER_VAR_NAME>XMLVAR_ELECTRICAL_Starter_#ID#_Cover_Opened</COVER_VAR_NAME>
							<COVER_VAR_TYPE>I</COVER_VAR_TYPE>
							<SWITCH_TYPE>MOMENTARY</SWITCH_TYPE>
							<SET_SWITCH_ON>(&gt;B:ELECTRICAL_Starter_#ID#_On)</SET_SWITCH_ON>
							<SET_SWITCH_OFF>#RELEASE_STARTER_CODE#</SET_SWITCH_OFF>
							<SWITCH_ANIM_CODE>(B:ELECTRICAL_Starter_#ID#, Bool) 100 *</SWITCH_ANIM_CODE>
							<WWISE_EVENT_1>starter_switch_on</WWISE_EVENT_1>
							<WWISE_EVENT_2>starter_switch_off</WWISE_EVENT_2>
						</UseTemplate>
					</True>
					<False>
						<Component ID="#NODE_ID#" Node="#NODE_ID#">
							<UseInputEvent ID="ELECTRICAL"/>
							<UseTemplate Name="ASOBO_GT_Push_Button">
								<OVERRIDE_ANIM_CODE>(B:ELECTRICAL_Starter_#ID#, Bool) 100 *</OVERRIDE_ANIM_CODE>
								<LEFT_SINGLE_CODE>(&gt;B:ELECTRICAL_Starter_#ID#_On)</LEFT_SINGLE_CODE>
								<LEFT_LEAVE_CODE>#RELEASE_STARTER_CODE#</LEFT_LEAVE_CODE>
								<WWISE_EVENT_1>starter_switch_on</WWISE_EVENT_1>
								<WWISE_EVENT_2>starter_switch_off</WWISE_EVENT_2>
							</UseTemplate>
						</Component>
					</False>
				</Condition>
			</Case>
			<Case Value="PUSH">
				<Component ID="#NODE_ID#" Node="#NODE_ID#">
					<UseTemplate Name="ASOBO_GT_Update">
						<FREQUENCY>5</FREQUENCY>
						<UPDATE_CODE>
							(O:XMLVAR_Starter_Held_Down_Duration) 0 &gt; if{
								(O:XMLVAR_Starter_Held_Down_Duration) (E:SIMULATION TIME, seconds) &lt; if{
									0 (&gt;O:XMLVAR_Starter_Held_Down_Duration)
									#STOP_STARTER#
								}
							}
						</UPDATE_CODE>
					</UseTemplate>
					<UseInputEvent ID="ELECTRICAL"/>
					<UseTemplate Name="ASOBO_GT_Push_Button_Held">
						<OVERRIDE_ANIM_CODE>(B:ELECTRICAL_Starter_#ID#) 100 *</OVERRIDE_ANIM_CODE>
						<SWITCH_POSITION_TYPE>L</SWITCH_POSITION_TYPE>
						<SWITCH_POSITION_VAR>XMLVAR_Starter_State</SWITCH_POSITION_VAR>
						<Switch>
							<Case Valid="USE_ENFORCED_MOMENTARY_MIN_DURATION">
								<LEFT_SINGLE_CODE>1 (&gt;O:_Interacting) 1 (&gt;B:ELECTRICAL_Starter_#ID#_Set) #MOMENTARY_MIN_DURATION# (E:SIMULATION TIME, seconds) + (&gt;O:XMLVAR_Starter_Held_Down_Duration)</LEFT_SINGLE_CODE>
								<LEFT_LEAVE_CODE>0 (&gt;O:_Interacting) (O:XMLVAR_Starter_Held_Down_Duration) 0 == if{ #RELEASE_STARTER_CODE# }</LEFT_LEAVE_CODE>
								<WHEEL_DOWN_CODE>1 (&gt;B:ELECTRICAL_Starter_#ID#_Set) #MOMENTARY_MIN_DURATION# (E:SIMULATION TIME, seconds) + (&gt;O:XMLVAR_Starter_Held_Down_Duration)</WHEEL_DOWN_CODE>
							</Case>
							<Default>
								<LEFT_SINGLE_CODE>1 (&gt;B:ELECTRICAL_Starter_#ID#_Set)</LEFT_SINGLE_CODE>
								<LEFT_LEAVE_CODE>#RELEASE_STARTER_CODE#</LEFT_LEAVE_CODE>
								<WHEEL_DOWN_CODE>1 (&gt;B:ELECTRICAL_Starter_#ID#_Set) #MOMENTARY_MIN_DURATION# (E:SIMULATION TIME, seconds) + (&gt;O:XMLVAR_Starter_Held_Down_Duration)</WHEEL_DOWN_CODE>
								<WHEEL_UP_CODE>#RELEASE_STARTER_CODE# 0 (&gt;O:XMLVAR_Starter_Held_Down_Duration)</WHEEL_UP_CODE>
							</Default>
						</Switch>
						<WWISE_EVENT_1>starter_push_button_on</WWISE_EVENT_1>
						<WWISE_EVENT_2>starter_push_button_off</WWISE_EVENT_2>
					</UseTemplate>
				</Component>
			</Case>
		</Switch>
	</Template>

	<Template Name="ASOBO_ELECTRICAL_Knob_Master_SubTemplate">
		<Parameters Type="Default">
			<NODE_ID>ELECTRICAL_Knob_Master</NODE_ID>
			<ANIM_NAME>ELECTRICAL_Knob_Master</ANIM_NAME>
			<PART_ID>Electrical_Knob_Master</PART_ID>
			<ID_BATTERY>#ID#</ID_BATTERY>
			<ID_ALTERNATOR>#ID#</ID_ALTERNATOR>
			<ID_STARTER>#ID#</ID_STARTER>
			<SWITCH_POSITION_TYPE_ISDOWN>L</SWITCH_POSITION_TYPE_ISDOWN>
			<SWITCH_POSITION_VAR_ISDOWN>XMLVAR_Starter_IsHeld</SWITCH_POSITION_VAR_ISDOWN>
			<SWITCH_POSITION_TYPE>O</SWITCH_POSITION_TYPE>
			<SWITCH_POSITION_VAR>XMLVAR_Master_SwitchState</SWITCH_POSITION_VAR>
			<Switch Param="SWITCH_TYPE">
				<Case Value="OFF_ON_START">
					<POS_OFF>0</POS_OFF>
					<POS_ON>1</POS_ON>
					<POS_START>2</POS_START>
					<SWITCH_DIRECTION>Horizontal</SWITCH_DIRECTION>
					<ARROW_TYPE>Curved</ARROW_TYPE>
					<ON_MASTER_OFF/>
					<ON_MASTER_ON/>
					<ON_MASTER_START/>
					<INTERACTION_TYPE>Knob</INTERACTION_TYPE>
				</Case>
			</Switch>
			<WWISE_PREFIX>electrical_master</WWISE_PREFIX>
			<TOOLTIP_TITLE>@TT_Package.ELECTRICAL_BATTERY_MASTER_TITLE</TOOLTIP_TITLE>
			<TT_DESCRIPTION_ID>@TT_Package.ELECTRICAL_BATTERY_MASTER_ACTION_SET</TT_DESCRIPTION_ID>
		</Parameters>
		<Switch Param="SWITCH_TYPE">
			<Case Value="OFF_ON_START">
				<UseTemplate Name="ASOBO_ELECTRICAL_Base_Template">
					<IE_NAME>Master_#ID#</IE_NAME>
					<Switch Param="INTERACTION_TYPE">
						<Case Value="Knob">
							<KNOB_TYPE>X_STATES</KNOB_TYPE>
						</Case>
					</Switch>
					<NUM_STATES>3</NUM_STATES>
					<MOMENTARY_SWITCH/>
					<STATE_MAX_TIMER>2</STATE_MAX_TIMER>
					<STATE0_TIMER>0</STATE0_TIMER>
					<SIMVAR_TO_WATCH_0>GENERAL ENG STARTER:#ID_STARTER#</SIMVAR_TO_WATCH_0>
					<SIMVAR_TO_WATCH_1>ELECTRICAL MASTER BATTERY:#ID_BATTERY#</SIMVAR_TO_WATCH_1>
					<SIMVAR_TO_WATCH_2>GENERAL ENG MASTER ALTERNATOR:#ID_ALTERNATOR#</SIMVAR_TO_WATCH_2>
					<SET_STATE_#POS_OFF#>
						#ID_BATTERY# (&gt;K:MASTER_BATTERY_OFF)
						#ID_ALTERNATOR# (&gt;K:ALTERNATOR_OFF)
						(A:GENERAL ENG STARTER:#ID_STARTER#, Bool) if{ 0 (&gt;K:SET_STARTER#ID_STARTER#_HELD) }
						#ON_MASTER_OFF#
					</SET_STATE_#POS_OFF#>
					<SET_STATE_#POS_ON#>
						#ID_BATTERY# (&gt;K:MASTER_BATTERY_ON)
						#ID_ALTERNATOR# (&gt;K:ALTERNATOR_ON)
						(A:GENERAL ENG STARTER:#ID_STARTER#, Bool) if{ 0 (&gt;K:SET_STARTER#ID_STARTER#_HELD) }
						#ON_MASTER_ON#
					</SET_STATE_#POS_ON#>
					<SET_STATE_#POS_START#>
						#ID_BATTERY# (&gt;K:MASTER_BATTERY_ON)
						#ID_ALTERNATOR# (&gt;K:ALTERNATOR_ON)
						1 (&gt;K:SET_STARTER#ID_STARTER#_HELD)
						#ON_MASTER_START#
					</SET_STATE_#POS_START#>
					<STR_STATE_#POS_OFF#>Off</STR_STATE_#POS_OFF#>
					<STR_STATE_#POS_ON#>On</STR_STATE_#POS_ON#>
					<STR_STATE_#POS_START#>Start</STR_STATE_#POS_START#>
					<TT_VALUE_#POS_OFF#>@TT_Package.GT_STATE_OFF</TT_VALUE_#POS_OFF#>
					<TT_VALUE_#POS_ON#>@TT_Package.GT_STATE_ON</TT_VALUE_#POS_ON#>
					<TT_VALUE_#POS_START#>@TT_Package.GT_STATE_START</TT_VALUE_#POS_START#>
					<GET_STATE_EXTERNAL>(A:GENERAL ENG STARTER:#ID_STARTER#, Bool) sp0 (A:ELECTRICAL MASTER BATTERY:#ID_BATTERY#, Bool) sp1 (A:GENERAL ENG MASTER ALTERNATOR:#ID_ALTERNATOR#, Bool) sp2</GET_STATE_EXTERNAL>
					<ENUM_VAL_TO_POS_EXTERNAL>
						l1 ! if{
							l0 if{ 0 (&gt;K:SET_STARTER#ID_STARTER#_HELD) }
							#POS_OFF# sp3 g1
						} els{
							#POS_START# #POS_ON# l0 ? sp3 g1
						} :1 l1 l2 != if{ #ID_ALTERNATOR# (&gt;K:TOGGLE_MASTER_ALTERNATOR) } l3
					</ENUM_VAL_TO_POS_EXTERNAL>
				</UseTemplate>
			</Case>
		</Switch>
	</Template>

	<Template Name="ASOBO_ELECTRICAL_Switch_Battery_STBY_SubTemplate">
		<Parameters Type="Default">
			<ANIM_NAME>ELECTRICAL_Switch_Battery_STBY</ANIM_NAME>
			<NODE_ID>ELECTRICAL_Switch_Battery_STBY</NODE_ID>
			<PART_ID>ELECTRICAL_Switch_Battery_STBY</PART_ID>
			<BATTERY_ID>#ID#</BATTERY_ID>
			<Condition Check="TEST_LIGHT_NODE_ID">
				<SWITCH_POS_TEST>2</SWITCH_POS_TEST>
			</Condition>
			<TOGGLE_COND>1</TOGGLE_COND>
			<TOGGLE_CODE></TOGGLE_CODE>
			<TOOLTIP_BATTERY_TITLE>@TT_Package.ELECTRICAL_SWITCH_BATTERY_STANDBY_TITLE</TOOLTIP_BATTERY_TITLE>
			<TT_DESCRIPTION_ID>@TT_PackageV3.ACTION.POSITION_SET</TT_DESCRIPTION_ID>
		</Parameters>
		<Parameters Type="Default">
			<Condition NotEmpty="LINE_ID">
				<True>
					<GET_BATTERY_STATE>(A:LINE CONNECTION ON:#LINE_ID#, Bool)</GET_BATTERY_STATE>
					<GET_BATTERY_VOLTAGE>(A:ELECTRICAL BATTERY VOLTAGE:#BATTERY_ID#, volts)</GET_BATTERY_VOLTAGE>
					<TOGGLE_BATTERY_STATE>#LINE_ID# (&gt;K:2:ELECTRICAL_LINE_CONNECTION_TOGGLE)</TOGGLE_BATTERY_STATE>
				</True>
				<False>
					<GET_BATTERY_STATE>(A:ELECTRICAL MASTER BATTERY:#BATTERY_ID#, bool)</GET_BATTERY_STATE>
					<GET_BATTERY_VOLTAGE>(A:ELECTRICAL BATTERY VOLTAGE:#BATTERY_ID#, volts)</GET_BATTERY_VOLTAGE>
					<TOGGLE_BATTERY_STATE>#BATTERY_ID# (&gt;K:TOGGLE_MASTER_BATTERY)</TOGGLE_BATTERY_STATE>
				</False>
			</Condition>
		</Parameters>
		<Parameters Type="Override">
			<TOOLTIP_TITLE>#TOOLTIP_BATTERY_TITLE#</TOOLTIP_TITLE>
			<TOOLTIP_ENTRY_0>ELECTRICAL_Battery_STBY_#BATTERY_ID#</TOOLTIP_ENTRY_0>
			<CODE_POS_0>
				#GET_BATTERY_STATE# ! if{
					#TOGGLE_BATTERY_STATE#
				}
				#TOGGLE_COND# if{
					#TOGGLE_CODE#
				}
				0 (&gt;L:XMLVAR_STBYBattery_Test)
			</CODE_POS_0>
			<CODE_POS_1>
				#GET_BATTERY_STATE# if{
					#TOGGLE_BATTERY_STATE#
				}
				#TOGGLE_COND# if{
					#TOGGLE_CODE#
				}
				0 (&gt;L:XMLVAR_STBYBattery_Test)
			</CODE_POS_1>
			<CODE_POS_2>
				#GET_BATTERY_STATE# if{
					#TOGGLE_BATTERY_STATE#
				}
				1 (&gt;L:XMLVAR_STBYBattery_Test)
			</CODE_POS_2>
			<STATE0_TEST>(L:XMLVAR_STBYBattery_Test) ! #GET_BATTERY_STATE#</STATE0_TEST>
			<STATE1_TEST>(L:XMLVAR_STBYBattery_Test) ! #GET_BATTERY_STATE# ! and</STATE1_TEST>
			<STATE2_TEST>(L:XMLVAR_STBYBattery_Test) #GET_BATTERY_STATE# ! and</STATE2_TEST>
			<SWITCH_POSITION_TYPE>L</SWITCH_POSITION_TYPE>
			<SWITCH_POSITION_VAR>XMLVAR_BatterySTBY_SwitchState</SWITCH_POSITION_VAR>
		</Parameters>
		<Component ID="ELECTRICAL_Battery_STBY">
			<Component ID="#NODE_ID#" Node="#NODE_ID#">
				<Update Frequency="5">
					#TOGGLE_COND# if{
						#TOGGLE_CODE#
					}
				</Update>
				<UseInputEvent ID="ELECTRICAL">
					<STBY_BATTERY_ID>#BATTERY_ID#</STBY_BATTERY_ID>
					<LOCAL_VAR_TO_WATCH_0>#SWITCH_POSITION_VAR#</LOCAL_VAR_TO_WATCH_0>
				</UseInputEvent>
				<UseTemplate Name="ASOBO_GT_Switch_3States">
					<MOMENTARY_SWITCH/>
					<SWITCH_POSITION_TYPE_ISDOWN>L</SWITCH_POSITION_TYPE_ISDOWN>
					<SWITCH_POSITION_VAR_ISDOWN>XMLVAR_STBYBattery_IsHeld</SWITCH_POSITION_VAR_ISDOWN>
					<STATE_MAX_TIMER>0.1</STATE_MAX_TIMER>
					<STATE0_TIMER>0</STATE0_TIMER>
					<ANIMTIP_0>TT:COCKPIT.TOOLTIPS.BATTERY_STBY_ARM</ANIMTIP_0>
					<ANIMTIP_1>TT:COCKPIT.TOOLTIPS.BATTERY_STBY_OFF</ANIMTIP_1>
					<ANIMTIP_2>TT:COCKPIT.TOOLTIPS.BATTERY_STBY_TEST</ANIMTIP_2>
				</UseTemplate>
			</Component>
			<Condition Check="TEST_LIGHT_NODE_ID">
				<Component ID="#TEST_LIGHT_NODE_ID#" Node="#TEST_LIGHT_NODE_ID#">
					<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
						<PART_ID/>
						<FAILURE>#GET_BATTERY_VOLTAGE# 17.0 &gt;</FAILURE>
						<EMISSIVE_CODE>(L:XMLVAR_STBYBattery_Test)</EMISSIVE_CODE>
					</UseTemplate>
				</Component>
			</Condition>
		</Component>
	</Template>

	<Template Name="ASOBO_ELECTRICAL_Switch_Alternator_STBY_SubTemplate">
		<Parameters Type="Default">
			<ANIM_NAME>ELECTRICAL_Switch_Alternator_STBY_#ID#</ANIM_NAME>
			<NODE_ID>ELECTRICAL_Switch_Alternator_STBY_#ID#</NODE_ID>
			<PART_ID>ELECTRICAL_Switch_Alternator_STBY</PART_ID>
			<GEN_ID>2</GEN_ID>
			<WWISE_EVENT_1>alternator_switch_on</WWISE_EVENT_1>
			<WWISE_EVENT_2>alternator_switch_off</WWISE_EVENT_2>
		</Parameters>
		<Parameters Type="Override">
			<IE_CONNECTION_ID>Bus_Alternator_Standby</IE_CONNECTION_ID>
		</Parameters>
		<UseTemplate Name="ASOBO_ELECTRICAL_Switch_Connection_Template">
			<ON_CONNECTION_ON>#GEN_ID# (&gt;K:ALTERNATOR_ON)</ON_CONNECTION_ON>
			<ON_CONNECTION_OFF>#GEN_ID# (&gt;K:ALTERNATOR_OFF)</ON_CONNECTION_OFF>
			<SIMVAR_TO_WATCH_0>GENERAL ENG MASTER ALTERNATOR:#GEN_ID#</SIMVAR_TO_WATCH_0>
			<IS_CONNECTION_ON>(A:GENERAL ENG MASTER ALTERNATOR:#GEN_ID#, Bool) and</IS_CONNECTION_ON>
			<ENSURE_VARIABLE_CONSISTENCY>(A:GENERAL ENG MASTER ALTERNATOR:#GEN_ID#, Bool) s0 (B:ELECTRICAL_#IE_CONNECTION_ID#, Bool) != if{ l0 (&gt;B:ELECTRICAL_#IE_CONNECTION_ID#_Set) }</ENSURE_VARIABLE_CONSISTENCY>
			<TT_DESCRIPTION_ID>@TT_Package.ELECTRICAL_ALTERNATOR_STANBY_ACTION_SET</TT_DESCRIPTION_ID>
			<TOOLTIP_TITLE>@TT_Package.ELECTRICAL_ALTERNATOR_STANBY_TITLE</TOOLTIP_TITLE>
		</UseTemplate>
		<Condition Check="LIGHT_NODE_ID">
			<Component ID="#LIGHT_NODE_ID#" Node="#LIGHT_NODE_ID#">
				<Parameters Type="Default">
					<DEFAULT_EMISSIVE>0.1</DEFAULT_EMISSIVE>
				</Parameters>
				<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
					<EMISSIVE_CODE>#SOURCE_BUS_ID# (A:1:BUS CONNECTION ON:#DESTINATION_BUS#, Bool) #DEFAULT_EMISSIVE# *</EMISSIVE_CODE>
				</UseTemplate>
			</Component>
		</Condition>
	</Template>

	<!-- Required: SOURCE_BUS_ID & AVIONICS_BUS_ID (found in system.xml) -->
	<Template Name="ASOBO_ELECTRICAL_Avionics_Bus_SubTemplate">
		<Parameters Type="Default">
			<ANIM_NAME>ELECTRICAL_#INTERACTION_TYPE#_Avionics_Bus_#ID#</ANIM_NAME>
			<NODE_ID>ELECTRICAL_#INTERACTION_TYPE#_Avionics_Bus_#ID#</NODE_ID>
			<PART_ID>ELECTRICAL_#INTERACTION_TYPE#_Avionics_Master</PART_ID>
			<WWISE_PREFIX>avionic</WWISE_PREFIX>
			<TOOLTIP_TITLE>@TT_Package.ELECTRICAL_SWITCH_AVIONICS_MASTER_TITLE</TOOLTIP_TITLE>
			<TT_DESCRIPTION_ID>@TT_Package.ELECTRICAL_SWITCH_AVIONICS_MASTER_ACTION_SET</TT_DESCRIPTION_ID>
			<IE_AVIONICS_BUS_ID>#ID#</IE_AVIONICS_BUS_ID>
			<Switch Param="TYPE">
				<Case Value="MULTI_BUS">
					<Switch Param="MULTI_BUS_TYPE">
						<Case Value="ON_OFF_COMPOSITE">
							<POS_ON>0</POS_ON>
							<POS_OFF>1</POS_OFF>
							<POS_COMPOSITE>2</POS_COMPOSITE>
							<ID_COMPOSITE>2</ID_COMPOSITE>
							<TT_VALUE_COMPOSITE>@TT_Package.GT_STATE_DISPATCH</TT_VALUE_COMPOSITE>
							<STR_STATE_COMPOSITE>Composite</STR_STATE_COMPOSITE>
						</Case>
					</Switch>
					<AVIONICS_BUS_ID_1>1</AVIONICS_BUS_ID_1>
					<SOURCE_BUS_ID_1>-1</SOURCE_BUS_ID_1>
					<AVIONICS_CIRCUIT_ID_1>1</AVIONICS_CIRCUIT_ID_1>
					<AVIONICS_BUS_ID_2>1</AVIONICS_BUS_ID_2>
					<SOURCE_BUS_ID_2>-1</SOURCE_BUS_ID_2>
					<AVIONICS_CIRCUIT_ID_2>1</AVIONICS_CIRCUIT_ID_2>
				</Case>
				<Default>
					<AVIONICS_BUS_ID>1</AVIONICS_BUS_ID>
					<SOURCE_BUS_ID>-1</SOURCE_BUS_ID>
					<AVIONICS_CIRCUIT_ID>1</AVIONICS_CIRCUIT_ID>
				</Default>
			</Switch>
		</Parameters>
		<Parameters Type="Override">
			<Condition NotEmpty="IE_NAME">
				<False>
					<IE_NAME>Avionics_Bus_#IE_AVIONICS_BUS_ID#</IE_NAME>
				</False>
			</Condition>
		</Parameters>
		<Parameters Type="Override">
			<Switch Param="TYPE">
				<Case Value="MULTI_BUS">
					<SET_CONNECTION_0>
						s0 (A:CIRCUIT SWITCH ON:#AVIONICS_CIRCUIT_ID_1#, Bool) != if{ #AVIONICS_CIRCUIT_ID_1# (&gt;K:ELECTRICAL_CIRCUIT_TOGGLE) }
						(A:CIRCUIT SWITCH ON:#AVIONICS_CIRCUIT_ID_1#, Bool) #SOURCE_BUS_ID_1# (A:1:BUS CONNECTION ON:#AVIONICS_BUS_ID_1#, Bool) != if{
							#AVIONICS_BUS_ID_1# #SOURCE_BUS_ID_1# (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
						}
					</SET_CONNECTION_0>
					<SET_CONNECTION_1>
						s0 (A:CIRCUIT SWITCH ON:#AVIONICS_CIRCUIT_ID_2#, Bool) != if{ #AVIONICS_CIRCUIT_ID_2# (&gt;K:ELECTRICAL_CIRCUIT_TOGGLE) }
						(A:CIRCUIT SWITCH ON:#AVIONICS_CIRCUIT_ID_2#, Bool) #SOURCE_BUS_ID_2# (A:1:BUS CONNECTION ON:#AVIONICS_BUS_ID_2#, Bool) != if{
							#AVIONICS_BUS_ID_2# #SOURCE_BUS_ID_2# (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
						}
					</SET_CONNECTION_1>
					<SIMVAR_TO_WATCH_0>CIRCUIT SWITCH ON:#AVIONICS_CIRCUIT_ID_1#</SIMVAR_TO_WATCH_0>
					<SIMVAR_TO_WATCH_1>CIRCUIT SWITCH ON:#AVIONICS_CIRCUIT_ID_2#</SIMVAR_TO_WATCH_1>
				</Case>
				<Default>
					<SET_CONNECTION>
						s0 (A:CIRCUIT SWITCH ON:#AVIONICS_CIRCUIT_ID#, Bool) != if{ #AVIONICS_CIRCUIT_ID# (&gt;K:ELECTRICAL_CIRCUIT_TOGGLE) }
						(A:CIRCUIT SWITCH ON:#AVIONICS_CIRCUIT_ID#, Bool) #SOURCE_BUS_ID# (A:1:BUS CONNECTION ON:#AVIONICS_BUS_ID#, Bool) != if{
							#AVIONICS_BUS_ID# #SOURCE_BUS_ID# (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
						}
					</SET_CONNECTION>
					<SIMVAR_TO_WATCH_0>CIRCUIT SWITCH ON:#AVIONICS_CIRCUIT_ID#</SIMVAR_TO_WATCH_0>
				</Default>
			</Switch>
		</Parameters>
		<UseTemplate Name="ASOBO_ELECTRICAL_Base_Template">
			<Switch Param="TYPE">
				<Case Value="MULTI_BUS">
					<GET_STATE_EXTERNAL>(A:#SIMVAR_TO_WATCH_0#, Bool) sp0 (A:#SIMVAR_TO_WATCH_1#, Bool) sp1</GET_STATE_EXTERNAL>
					<Switch Param="MULTI_BUS_TYPE">
						<Case Value="ON_OFF_COMPOSITE">
							<NUM_STATES>3</NUM_STATES>
							<STR_STATE_#POS_ON#>On</STR_STATE_#POS_ON#>
							<STR_STATE_#POS_OFF#>Off</STR_STATE_#POS_OFF#>
							<STR_STATE_#POS_COMPOSITE#>#STR_STATE_COMPOSITE#</STR_STATE_#POS_COMPOSITE#>
							<TT_VALUE_#POS_ON#>@TT_Package.GT_STATE_ON</TT_VALUE_#POS_ON#>
							<TT_VALUE_#POS_OFF#>@TT_Package.GT_STATE_OFF</TT_VALUE_#POS_OFF#>
							<TT_VALUE_#POS_COMPOSITE#>#TT_VALUE_COMPOSITE#</TT_VALUE_#POS_COMPOSITE#>
							<SET_STATE_#POS_ON#>1 #SET_CONNECTION_0# 1 #SET_CONNECTION_1#</SET_STATE_#POS_ON#>
							<SET_STATE_#POS_OFF#>0 #SET_CONNECTION_0# 0 #SET_CONNECTION_1#</SET_STATE_#POS_OFF#>
							<Switch Param="ID_COMPOSITE">
								<Case Value="1">
									<SET_STATE_#POS_COMPOSITE#>1 #SET_CONNECTION_0# 0 #SET_CONNECTION_1#</SET_STATE_#POS_COMPOSITE#>
									<ENUM_VAL_TO_POS_EXTERNAL>
										l0 l1 ! and if{ #POS_COMPOSITE# sp2 g2 }
										l0 l1 and if{ #POS_ON# sp2 g2 }
										l0 ! l1 ! and if{ #POS_OFF# sp2 g2 }
										els{ l0 l1 or s0 sp1 }
										:2 l0 #SET_CONNECTION_0# l1 #SET_CONNECTION_1# l2
									</ENUM_VAL_TO_POS_EXTERNAL>
								</Case>
								<Case Value="2">
									<SET_STATE_#POS_COMPOSITE#>0 #SET_CONNECTION_0# 1 #SET_CONNECTION_1#</SET_STATE_#POS_COMPOSITE#>
									<ENUM_VAL_TO_POS_EXTERNAL>
										l0 ! l1 and if{ #POS_COMPOSITE# sp2 g2 }
										l0 l1 and if{ #POS_ON# sp2 g2 }
										l0 ! l1 ! and if{ #POS_OFF# sp2 g2 }
										els{ l0 l1 or s0 sp1 }
										:2 l0 #SET_CONNECTION_0# l1 #SET_CONNECTION_1# l2
									</ENUM_VAL_TO_POS_EXTERNAL>
								</Case>
							</Switch>
						</Case>
						<Default>
							<SET_STATE_EXTERNAL>p0 #SET_CONNECTION_0# p0 #SET_CONNECTION_1#</SET_STATE_EXTERNAL>
							<ENUM_VAL_TO_POS_EXTERNAL>l0 l1 != if{ l0 sp1 } l0 l1 and sp2 l0 #SET_CONNECTION_0# l1 #SET_CONNECTION_1# l2</ENUM_VAL_TO_POS_EXTERNAL>
						</Default>
					</Switch>
				</Case>
				<Default>
					<SET_STATE_EXTERNAL>p0 #SET_CONNECTION#</SET_STATE_EXTERNAL>
					<GET_STATE_EXTERNAL>(A:#SIMVAR_TO_WATCH_0#, Bool) sp0</GET_STATE_EXTERNAL>
					<ENUM_VAL_TO_POS_EXTERNAL>l0 #SET_CONNECTION# (A:#SIMVAR_TO_WATCH_0#, Bool)</ENUM_VAL_TO_POS_EXTERNAL>
				</Default>
			</Switch>
		</UseTemplate>
	</Template>

	<Template Name="ASOBO_ELECTRICAL_Switch_Essential_Bus_SubTemplate">
		<Parameters Type="Default">
			<NODE_ID>ELECTRICAL_Switch_Essential_Bus</NODE_ID>
			<ANIM_NAME>ELECTRICAL_Switch_Essential_Bus</ANIM_NAME>
			<PART_ID>ELECTRICAL_Switch_Essential_Bus</PART_ID>
			<MAIN_BUS_ID>1</MAIN_BUS_ID>
			<ESSENTIAL_BUS_ID>2</ESSENTIAL_BUS_ID>
			<BATTERY_BUS_ID>3</BATTERY_BUS_ID>
			<Condition Check="USE_ESSENTIALS_ON_INDICATOR">
				<EMISSIVE_NODE_ID>ELECTRICAL_Light_Essential_Bus</EMISSIVE_NODE_ID>
			</Condition>
			<TOOLTIP_ESSENTIAL_BUS_TITLE>@TT_Package.SAFETY_SWITCH_ESSENTIALBUS_TITLE</TOOLTIP_ESSENTIAL_BUS_TITLE>
		</Parameters>
		<Parameters Type="Override">
			<TOOLTIP_TITLE>#TOOLTIP_ESSENTIAL_BUS_TITLE#</TOOLTIP_TITLE>
			<TOOLTIP_ENTRY_0>ELECTRICAL_EssentialBus_#ESSENTIAL_BUS_ID#</TOOLTIP_ENTRY_0>
		</Parameters>
		<Component ID="#NODE_ID#_#ID#" Node="#NODE_ID#">
			<UseInputEvent ID="ELECTRICAL"/>
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<ANIM_CODE>(B:ELECTRICAL_EssentialBus_#ESSENTIAL_BUS_ID#) 100 *</ANIM_CODE>
				<LEFT_SINGLE_CODE>(&gt;B:ELECTRICAL_EssentialBus_#ESSENTIAL_BUS_ID#_Toggle)</LEFT_SINGLE_CODE>
			</UseTemplate>
		</Component>
		<Condition Check="USE_ESSENTIALS_ON_INDICATOR">
			<Component ID="#EMISSIVE_NODE_ID#" Node="#EMISSIVE_NODE_ID#">
				<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
					<EMISSIVE_CODE>(B:ELECTRICAL_EssentialBus_#ESSENTIAL_BUS_ID#)</EMISSIVE_CODE>
				</UseTemplate>
			</Component>
		</Condition>
	</Template>

	<Template Name="ASOBO_ELECTRICAL_Switch_Bus_SubTemplate">
		<DefaultTemplateParameters>
			<NODE_ID>ELECTRICAL_Switch_Bus_#ID#</NODE_ID>
			<ANIM_NAME>ELECTRICAL_Switch_Bus_#ID#</ANIM_NAME>
			<PART_ID>ELECTRICAL_Switch_Bus</PART_ID>
			<WWISE_EVENT_1>bus_tie_switch_on</WWISE_EVENT_1>
			<WWISE_EVENT_2>bus_tie_switch_off</WWISE_EVENT_2>
			<AUDIO_NORMALIZED_TIME_1>0.1</AUDIO_NORMALIZED_TIME_1>
			<AUDIO_NORMALIZED_TIME_2>0.5</AUDIO_NORMALIZED_TIME_2>
			<ON_TOOLTIP></ON_TOOLTIP>
			<OFF_TOOLTIP></OFF_TOOLTIP>
		</DefaultTemplateParameters>
		<OverrideTemplateParameters>
			<LEFT_SINGLE_CODE>#SOURCE_ID# #ID# (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)</LEFT_SINGLE_CODE>
			<Switch Param="TYPE">
				<Case Value="BOEING">
					<IS_AIRLINER>True</IS_AIRLINER>
					<SEQ1_EMISSIVE_CODE>#SOURCE_ID# (A:1:BUS CONNECTION ON:#ID#, Bool)</SEQ1_EMISSIVE_CODE>
					<SEQ2_EMISSIVE_CODE>#SOURCE_ID# (A:1:BUS CONNECTION ON:#ID#, Bool) !</SEQ2_EMISSIVE_CODE>
					<TOOLTIPID>%(#SOURCE_ID# (A:1:BUS CONNECTION ON:#ID#, Bool) !)%{if}TT:#OFF_TOOLTIP#%{else}TT:#ON_TOOLTIP#%{end}</TOOLTIPID>
				</Case>
				<Default>
					<IS_AIRLINER>False</IS_AIRLINER>
				</Default>
			</Switch>
		</OverrideTemplateParameters>

		<Condition Check="IS_AIRLINER" Match="True">
			<True>
				<UseTemplate Name="ASOBO_GT_Push_Button_Airliner">
				</UseTemplate>
			</True>
			<False>
				<Component ID="#NODE_ID#" Node="#NODE_ID#">
					<UseTemplate Name="ASOBO_GT_Push_Button">
					</UseTemplate>
				</Component>
			</False>
		</Condition>
	</Template>

	<Template Name="ASOBO_ELECTRICAL_Circuit_SubTemplate">
		<Parameters Type="Default">
			<NODE_ID>ELECTRICAL_#INTERACTION_TYPE#_Circuit_#ID#</NODE_ID>
			<ANIM_NAME>ELECTRICAL_#INTERACTION_TYPE#_Circuit_#ID#</ANIM_NAME>
			<PART_ID>ELECTRICAL_#INTERACTION_TYPE#_Circuit</PART_ID>
			<Switch Param="INTERACTION_TYPE">
				<Case Value="Switch">
					<WWISE_EVENT_1>electrical_circuit_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>electrical_circuit_switch_off</WWISE_EVENT_2>
					<AUDIO_NORMALIZED_TIME_1>0.1</AUDIO_NORMALIZED_TIME_1>
					<AUDIO_NORMALIZED_TIME_2>0.5</AUDIO_NORMALIZED_TIME_2>
				</Case>
				<Case Value="Push">
					<WWISE_EVENT_1>electrical_circuit_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>electrical_circuit_switch_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
				</Case>
			</Switch>
			<IE_CIRCUIT_ID>Circuit_#CIRCUIT_ID#</IE_CIRCUIT_ID>
		</Parameters>
		<Parameters Type="Override">
			<BTN_ID>#IE_CIRCUIT_ID#</BTN_ID>
			<IS_CIRCUIT_ON>(A:CIRCUIT SWITCH ON:#CIRCUIT_ID#, Bool)</IS_CIRCUIT_ON>
		</Parameters>
		<Component ID="#NODE_ID#" Node="#NODE_ID#">
			<Parameters Type="Override">
				<TOOLTIP_ENTRY_0>ELECTRICAL_#BTN_ID#</TOOLTIP_ENTRY_0>
			</Parameters>
			<UseInputEvent ID="ELECTRICAL">
				<SET_STATE_EXTERNAL>#IS_CIRCUIT_ON# p0 != if{ #CIRCUIT_ID# (&gt;K:ELECTRICAL_CIRCUIT_TOGGLE) }</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>#IS_CIRCUIT_ON# sp0</GET_STATE_EXTERNAL>
				<SIM_STATE_IS_ON_EXTERNAL>l0</SIM_STATE_IS_ON_EXTERNAL>
				<SIMVAR_TO_WATCH_0>CIRCUIT SWITCH ON:#CIRCUIT_ID#</SIMVAR_TO_WATCH_0>
				<ANIM>EXTERNAL</ANIM>
			</UseInputEvent>
			<Switch Param="INTERACTION_TYPE">
				<Case Value="Switch">
					<UseTemplate Name="ASOBO_GT_Switch_Code">
						<ANIM_CODE>(B:ELECTRICAL_#BTN_ID#, Bool) 100 *</ANIM_CODE>
						<LEFT_SINGLE_CODE>(&gt;B:ELECTRICAL_#BTN_ID#_Toggle)</LEFT_SINGLE_CODE>
					</UseTemplate>
				</Case>
				<Case Value="Push">
					<UseTemplate Name="ASOBO_GT_Push_Button">
						<LEFT_SINGLE_CODE>(&gt;B:ELECTRICAL_#BTN_ID#_Toggle)</LEFT_SINGLE_CODE>
					</UseTemplate>
				</Case>
			</Switch>
		</Component>
	</Template>

	<!-- Required: NODE_ID, ANIM_NAME, LINE_ID -->
	<!-- Designed to work for the FS2024 Electrical system only -->
	<Template Name="ASOBO_ELECTRICAL_Switch_Breaker_EX1_SubTemplate">
		<Parameters Type="Default">
			<TOOLTIP_TITLE>@TT_Package.GT_STATE_COM</TOOLTIP_TITLE>
			<TT_DESCRIPTION>@TT_Package.AS510_SWITCH_POWER_ACTION</TT_DESCRIPTION>
			<TT_DESCRIPTION_IS_DYNAMIC>@TT_Package.AS510_SWITCH_POWER_ACTION</TT_DESCRIPTION_IS_DYNAMIC>
			<TT_VALUE_IS_DYNAMIC>True</TT_VALUE_IS_DYNAMIC>
			<TOOLTIP_DISABLED>True</TOOLTIP_DISABLED>
			<SET_BREAKER>sp0</SET_BREAKER>
			<GET_BREAKER>0</GET_BREAKER>
			<PART_ID>#NODE_ID#</PART_ID>
		</Parameters>
		<Parameters Type="Override">
			<Condition NotEmpty="LINE_ID_1">
				<True>
					<Loop>
						<Setup>
							<Param>CUR_ID</Param>
							<From>1</From>
							<Inc>1</Inc>
							<While>
								<Arg Valid="LINE_ID_#CUR_ID#"/>
							</While>
						</Setup>
						<Do>
							<Parameters Type="Override">
								<LINE_ID Process="Param">LINE_ID_#CUR_ID#</LINE_ID>
								<SIMVAR_ID Process="Int">#CUR_ID# 1 -</SIMVAR_ID>
							</Parameters>
							<Parameters Type="Override" LifeTime="Loop">
								<SET_BREAKER>#SET_BREAKER# l0 (A:LINE BREAKER PULLED:#LINE_ID#, Bool) != if{ #LINE_ID# (&gt;K:ELECTRICAL_LINE_BREAKER_TOGGLE) }</SET_BREAKER>
								<GET_BREAKER>#GET_BREAKER# (A:LINE BREAKER PULLED:#LINE_ID#, Bool) or</GET_BREAKER>
								<SIMVAR_TO_WATCH_#SIMVAR_ID#>LINE BREAKER PULLED:#LINE_ID#</SIMVAR_TO_WATCH_#SIMVAR_ID#>
							</Parameters>
						</Do>
					</Loop>
					<LINE_ID>#LINE_ID_1#</LINE_ID>
				</True>
				<False>
					<SET_BREAKER>(A:LINE BREAKER PULLED:#LINE_ID#, Bool) != if{ #LINE_ID# (&gt;K:ELECTRICAL_LINE_BREAKER_TOGGLE) }</SET_BREAKER>
					<GET_BREAKER>(A:LINE BREAKER PULLED:#LINE_ID#, Bool)</GET_BREAKER>
					<SIMVAR_TO_WATCH_0>LINE BREAKER PULLED:#LINE_ID#</SIMVAR_TO_WATCH_0>
				</False>
			</Condition>
		</Parameters>
		<Parameters Type="Default">
			<TT_VALUE>(A:LINE BREAKER PULLED:#LINE_ID#, Bool) @TT_OnOff_Cond</TT_VALUE>
			<IE_NAME>Breaker_#NODE_ID#</IE_NAME>
		</Parameters>
		<UseTemplate Name="ASOBO_ELECTRICAL_Base_Template">
			<WWISE_PREFIX>breaker</WWISE_PREFIX>
			<SET_STATE_ON>1 #SET_BREAKER#</SET_STATE_ON>
			<SET_STATE_OFF>0 #SET_BREAKER#</SET_STATE_OFF>
			<GET_STATE_EXTERNAL>#GET_BREAKER# sp0</GET_STATE_EXTERNAL>
			<INTERACTION_TYPE>Switch</INTERACTION_TYPE>
		</UseTemplate>
	</Template>

	<!-- Required: CIRCUIT_NAME -->
	<Template Name="ASOBO_ELECTRICAL_Switch_Breaker_Template">
		<DefaultTemplateParameters>
			<BUS_INDEX>-1</BUS_INDEX>
			<WWISE_EVENT_1>breaker_switch_on</WWISE_EVENT_1>
			<WWISE_EVENT_2>breaker_switch_off</WWISE_EVENT_2>
		</DefaultTemplateParameters>

		<Component ID="#NODE_ID#" Node="#NODE_ID#">
			<Condition Check="NEW_IE">
				<True>
					<Parameters Type="Default">
						<ANIM_NAME>ELECTRICAL_BREAKER_COM</ANIM_NAME>
					</Parameters>
					<UseTemplate Name="ASOBO_ELECTRICAL_Base_Template">
						<EXTRA_OPTION/>
						<CREATE_COMPONENT>False</CREATE_COMPONENT>
						<IE_NAME>RADIO_Breaker</IE_NAME>
						<WWISE_PREFIX>breaker</WWISE_PREFIX>
						<TOOLTIP_TITLE>@TT_Package.GT_STATE_COM</TOOLTIP_TITLE>
						<TT_DESCRIPTION>@TT_Package.AS510_SWITCH_POWER_ACTION</TT_DESCRIPTION>
						<TT_DESCRIPTION_IS_DYNAMIC>@TT_Package.AS510_SWITCH_POWER_ACTION</TT_DESCRIPTION_IS_DYNAMIC>
						<SET_STATE_EXTERNAL>#CIRCUIT_INDEX# #BUS_INDEX# (&gt;K:2:ELECTRICAL_CIRCUIT_BREAKER_TOGGLE)</SET_STATE_EXTERNAL>
						<GET_STATE_EXTERNAL>(A:CIRCUIT ON:#CIRCUIT_INDEX#, Bool) sp0</GET_STATE_EXTERNAL>
						<TT_VALUE>(A:CIRCUIT ON:#CIRCUIT_INDEX#, Bool) @TT_OnOff_Cond</TT_VALUE>
						<TT_VALUE_IS_DYNAMIC>True</TT_VALUE_IS_DYNAMIC>
						<INTERACTION_TYPE>Switch</INTERACTION_TYPE>
						<INIT_CODE/>
						<INVERT_ANIM/>
					</UseTemplate>
				</True>
				<False>
					<UseTemplate Name="ASOBO_GT_Switch_Code">
						<Condition Check="CIRCUIT_INDEX">
							<True>
								<ANIM_CODE>#BUS_INDEX# (&gt;A:BUS LOOKUP INDEX, Number) (A:CIRCUIT BREAKER PULLED:#CIRCUIT_INDEX#, Bool) 100 *</ANIM_CODE>
								<LEFT_SINGLE_CODE>#CIRCUIT_INDEX# #BUS_INDEX# (&gt;K:2:ELECTRICAL_CIRCUIT_BREAKER_TOGGLE)</LEFT_SINGLE_CODE>
							</True>
							<False>
								<ANIM_CODE>(A:BREAKER #CIRCUIT_NAME#, Bool) 100 *</ANIM_CODE>
								<LEFT_SINGLE_CODE>(&gt;K:BREAKER_#CIRCUIT_NAME#_TOGGLE)</LEFT_SINGLE_CODE>
							</False>
						</Condition>
					</UseTemplate>
				</False>
			</Condition>
		</Component>
	</Template>

	<Template Name="ASOBO_ELECTRICAL_Emissive_Bus_SubTemplate">
		<UseTemplate Name="ASOBO_GT_Component_Emissive_Gauge">
			<EMISSIVE_CODE>(A:ELECTRICAL MAIN BUS VOLTAGE:#BUS_INDEX#, volts) 0 ==</EMISSIVE_CODE>
		</UseTemplate>
	</Template>

	<Template Name="ASOBO_ELECTRICAL_Procedure_SubTemplate">
		<Parameters Type="Default">
			<NODE_ID>ELECTRICAL_#INTERACTION_TYPE#_Procedure</NODE_ID>
			<ANIM_NAME>ELECTRICAL_#INTERACTION_TYPE#_Procedure</ANIM_NAME>
			<PROC_ID>1</PROC_ID>
			<IE_PROC_ID>Procedure_#ID#</IE_PROC_ID>
			<Switch Param="INTERACTION_TYPE">
				<Case Value="Switch">
					<ANIM_CODE>#IS_ON# 100 *</ANIM_CODE>
				</Case>
			</Switch>
			<TOOLTIP_TITLE>@TT_OverrideMe_Title</TOOLTIP_TITLE>
			<TT_DESCRIPTION_ID>@TT_OverrideMe_Description</TT_DESCRIPTION_ID>
		</Parameters>
		<Parameters Type="Override">
			<TOOLTIP_ENTRY_0>ELECTRICAL_#IE_PROC_ID#</TOOLTIP_ENTRY_0>
			<LEFT_SINGLE_CODE>(&gt;B:ELECTRICAL_#IE_PROC_ID#_Toggle)</LEFT_SINGLE_CODE>
		</Parameters>
		<Component ID="#NODE_ID#_#ID#" Node="#NODE_ID#">
			<UseInputEvent ID="ELECTRICAL">
				<BTN_ID>#IE_PROC_ID#</BTN_ID>
				<SET_STATE_ON>0 #PROC_ID# (&gt;K:2:ELECTRICAL_EXECUTE_PROCEDURE)</SET_STATE_ON>
				<SET_STATE_OFF>1 #PROC_ID# (&gt;K:2:ELECTRICAL_EXECUTE_PROCEDURE)</SET_STATE_OFF>
				<GET_STATE_EXTERNAL>#IS_ON# sp0</GET_STATE_EXTERNAL>
				<SIM_STATE_IS_ON_EXTERNAL>l0</SIM_STATE_IS_ON_EXTERNAL>
			</UseInputEvent>
			<Switch Param="INTERACTION_TYPE">
				<Case Value="Switch">
					<UseTemplate Name="ASOBO_GT_Switch_Code"/>
				</Case>
				<Case Value="Push">
					<UseTemplate Name="ASOBO_GT_Push_Button"/>
				</Case>
			</Switch>
		</Component>
	</Template>

	<Template Name="ASOBO_ELECTRICAL_EX1_Switch_Line_SubTemplate">
		<Parameters Type="Default">
			<Condition NotEmpty="LINE_NAME">
				<ID>'#LINE_NAME#'_n</ID>
			</Condition>
			<Condition NotEmpty="ID">
				<LINE_NAME>#ID#</LINE_NAME>
			</Condition>
		</Parameters>
		<Parameters Type="Default">
			<Condition Valid="IS_COVERED">
				<True>
					<SWITCH_NODE_ID>ELECTRICAL_EX1_Switch_Line_#LINE_NAME#</SWITCH_NODE_ID>
					<SWITCH_ANIM_NAME>ELECTRICAL_EX1_Switch_Line_#LINE_NAME#</SWITCH_ANIM_NAME>
					<COVER_IE_ID_SOURCE>ELECTRICAL</COVER_IE_ID_SOURCE>
					<COVER_IE_NAME>ELECTRICAL_EX1_Switch_Line_#LINE_NAME#_Cover</COVER_IE_NAME>
					<COVER_NODE_ID>ELECTRICAL_EX1_Switch_Line_#LINE_NAME#_Cover</COVER_NODE_ID>
					<COVER_ANIM_NAME>ELECTRICAL_EX1_Switch_Line_#LINE_NAME#_Cover</COVER_ANIM_NAME>
					<TEMPLATE_TO_USE>ASOBO_GT_Switch_Covered</TEMPLATE_TO_USE>
					<CREATE_COMPONENT>False</CREATE_COMPONENT>
					<Condition NotEmpty="SWITCH_POSITION_ON_CLOSE">
						<ON_COVER_CLOSED>#SWITCH_POSITION_ON_CLOSE# (&gt;B:ELECTRICAL_Line_#LINE_NAME#_Set)</ON_COVER_CLOSED>
					</Condition>
					<SWITCH_TT_VALUE>(A:LINE CONNECTION ON:#ID#, Bool) @TT_OnOff_Cond</SWITCH_TT_VALUE>
				</True>
				<False>
					<NODE_ID>ELECTRICAL_EX1_Switch_Line_#LINE_NAME#</NODE_ID>
					<ANIM_NAME>ELECTRICAL_EX1_Switch_Line_#LINE_NAME#</ANIM_NAME>
					<TT_VALUE>(A:LINE CONNECTION ON:#ID#, Bool) @TT_OnOff_Cond</TT_VALUE>
					<TT_VALUE_IS_DYNAMIC>True</TT_VALUE_IS_DYNAMIC>
				</False>
			</Condition>
			<PART_ID>ELECTRICAL_EX1_Switch_Line</PART_ID>
			<WWISE_EVENT_1>bus_tie_switch_on</WWISE_EVENT_1>
			<WWISE_EVENT_2>bus_tie_switch_off</WWISE_EVENT_2>
			<AUDIO_NORMALIZED_TIME_1>0.1</AUDIO_NORMALIZED_TIME_1>
			<AUDIO_NORMALIZED_TIME_2>0.5</AUDIO_NORMALIZED_TIME_2>
			<INTERACTION_TYPE>Switch</INTERACTION_TYPE>
		</Parameters>
		<Parameters Type="Override">
			<BTN_ID>Line_#LINE_NAME#</BTN_ID>
		</Parameters>
		<UseTemplate Name="ASOBO_ELECTRICAL_Base_Template">
			<IE_NAME>#BTN_ID#</IE_NAME>
			<SET_STATE_EXTERNAL>p0 #ID# (&gt;K:2:ELECTRICAL_LINE_CONNECTION_SET)</SET_STATE_EXTERNAL>
			<GET_STATE_EXTERNAL>(A:LINE CONNECTION ON:#ID#, Bool) sp0</GET_STATE_EXTERNAL>
			<SIMVAR_TO_WATCH_0>LINE CONNECTION ON:#ID#</SIMVAR_TO_WATCH_0>
		</UseTemplate>
	</Template>

	<!-- #################################################### -->
</ModelBehaviors>