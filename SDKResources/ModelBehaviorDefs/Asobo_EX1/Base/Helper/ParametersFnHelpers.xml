<ModelBehaviors>
	<!-- IN: PFN_PARAM_DEFAULT (Default parametersFn to call) -->
	<!-- IN: PFN_PARAM_NAME (Name of the parameter users can override to call a different parametersFn than the default) -->
	<!-- OUT: Output of the selected parametersFn -->
	<ParametersFn Name="ASOBO_PFN_Call_Overridable_ParametersFn_Helper">
		<Parameters Type="Default">
			<#PFN_PARAM_NAME#>#PFN_PARAM_DEFAULT#</#PFN_PARAM_NAME#>
		</Parameters>
		<Parameters Type="Override">
			<__FN_NAME__ Process="Param">#PFN_PARAM_NAME#</__FN_NAME__>
		</Parameters>
		<ReturnParameters>
			<UseParametersFn Name="#__FN_NAME__#">
				<PFN_PARAM_NAME/>
			</UseParametersFn>
		</ReturnParameters>
	</ParametersFn>
	<!-- IN: PFN_TO_CALL (parametersFn to call) -->
	<!-- IN: PFN_PARAM_NAME (Name of the parameter users can override to call a different parametersFn than the default) -->
	<!-- OUT: Output of the selected parametersFn -->
	<ParametersFn Name="ASOBO_PFN_Call_Overridable_ParametersFn_No_Default_Helper">
		<Parameters Type="Override">
			<__FN_NAME__ Process="Param">#PFN_PARAM_NAME#</__FN_NAME__>
		</Parameters>
		<ReturnParameters>
			<Condition NotEmpty="__FN_NAME__">
				<UseParametersFn Name="#__FN_NAME__#">
					<PFN_PARAM_NAME/>
				</UseParametersFn>
			</Condition>
		</ReturnParameters>
	</ParametersFn>
	<!-- IN: IN_PARAM_NAME (Parameter to lookup the value of) -->
	<!-- IN: IN_PARAM_ID (Parameter ID to add) -->
	<!-- IN: OUT_PARAM_PREFIX (Prefix) -->
	<!-- IN: OUT_PARAM_SUFFIX (Suffix) -->
	<!-- IN (opt): APPEND_SEPARATOR (if False will not append anything in between IN_PARAM_ID and OUT_PARAM_PREFIX & OUT_PARAM_SUFFIX) -->
	<!-- IN (opt): PREFIX_SEPARATOR (in between OUT_PARAM_PREFIX and IN_PARAM_ID) -->
	<!-- IN (opt): SUFFIX_SEPARATOR (in between IN_PARAM_ID and OUT_PARAM_SUFFIX ) -->
	<!-- OUT: Parameter with concatenated ID -->
	<ParametersFn Name="ASOBO_PFN_Add_ID_To_Parameter_Helper">
		<Parameters Type="Default">
			<Switch>
				<Case Valid="PREFIX_ID">
					<OUT_PARAM_PREFIX/>
					<OUT_PARAM_SUFFIX>#IN_PARAM_NAME#</OUT_PARAM_SUFFIX>
				</Case>
				<Default>
					<OUT_PARAM_PREFIX>#IN_PARAM_NAME#</OUT_PARAM_PREFIX>
					<OUT_PARAM_SUFFIX/>
				</Default>
			</Switch>
			<APPEND_SEPARATOR>True</APPEND_SEPARATOR>
		</Parameters>
		<Parameters Type="Default">
			<Condition Valid="APPEND_SEPARATOR">
				<Condition NotEmpty="OUT_PARAM_PREFIX">
					<PREFIX_SEPARATOR>_</PREFIX_SEPARATOR>
				</Condition>
				<Condition NotEmpty="OUT_PARAM_SUFFIX">
					<SUFFIX_SEPARATOR>_</SUFFIX_SEPARATOR>
				</Condition>
			</Condition>
		</Parameters>
		<Parameters Type="Default">
			<PREFIX_SEPARATOR/>
			<SUFFIX_SEPARATOR/>
		</Parameters>
		<Parameters Type="Override">
			<__PARAM_VALUE__ Process="Param">#IN_PARAM_NAME#</__PARAM_VALUE__>
			<__PARAM_ID__>#IN_PARAM_ID#</__PARAM_ID__>
		</Parameters>
		<Parameters Type="Override">
			<__PARAM_ID__>#PREFIX_SEPARATOR##__PARAM_ID__##SUFFIX_SEPARATOR#</__PARAM_ID__>
		</Parameters>
		<Parameters Type="Override">
			<__PARAM_NAME__>#OUT_PARAM_PREFIX##__PARAM_ID__##OUT_PARAM_SUFFIX#</__PARAM_NAME__>
		</Parameters>
		<ReturnParameters>
			<#__PARAM_NAME__#>#__PARAM_VALUE__#</#__PARAM_NAME__#>
		</ReturnParameters>
	</ParametersFn>
	<!-- Same as ASOBO_PFN_Add_ID_To_Parameter_Helper but for multiple parameters at a time -->
	<!-- IN: Same parameters but all suffixed with an index (starting at 0) ex: IN_PARAM_NAME becomes IN_PARAM_NAME_0, IN_PARAM_NAME_1, ... -->
	<ParametersFn Name="ASOBO_PFN_Add_ID_To_Parameters_Helper">
		<Parameters Type="Default">
			<ELTS_COUNT>512</ELTS_COUNT>
			<FIRST_ID>0</FIRST_ID>
		</Parameters>
		<ReturnParameters>
			<Loop>
				<Setup>
					<Param>CUR_ID</Param>
					<From>#FIRST_ID#</From>
					<Inc>1</Inc>
					<To>#ELTS_COUNT#</To>
					<While>
						<Arg Check="IN_PARAM_#CUR_ID#_NAME"/>
					</While>
				</Setup>
				<Do>
					<UseParametersFn Name="ASOBO_PFN_Add_ID_To_Parameter_Helper">
						<IN_PARAM_NAME Process="Param">IN_PARAM_#CUR_ID#_NAME</IN_PARAM_NAME>
						<Condition Check="IN_PARAM_#CUR_ID#_ID">
							<IN_PARAM_ID Process="Param">IN_PARAM_#CUR_ID#_ID</IN_PARAM_ID>
						</Condition>
						<Condition Check="OUT_PARAM_#CUR_ID#_PREFIX">
							<OUT_PARAM_PREFIX Process="Param">OUT_PARAM_#CUR_ID#_PREFIX</OUT_PARAM_PREFIX>
						</Condition>
						<Condition Check="OUT_PARAM_#CUR_ID#_SUFFIX">
							<OUT_PARAM_SUFFIX Process="Param">OUT_PARAM_#CUR_ID#_SUFFIX</OUT_PARAM_SUFFIX>
						</Condition>
						<Condition Check="OUT_PARAM_#CUR_ID#_PREFIX_SEPARATOR">
							<PREFIX_SEPARATOR Process="Param">OUT_PARAM_#CUR_ID#_PREFIX_SEPARATOR</PREFIX_SEPARATOR>
						</Condition>
						<Condition Check="OUT_PARAM_#CUR_ID#_SUFFIX_SEPARATOR">
							<SUFFIX_SEPARATOR Process="Param">OUT_PARAM_#CUR_ID#_SUFFIX_SEPARATOR</SUFFIX_SEPARATOR>
						</Condition>
					</UseParametersFn>
				</Do>
			</Loop>
		</ReturnParameters>
	</ParametersFn>
	<!-- IN: IN_PARAM_NAME (Name of the param to unindex) -->
	<!-- OUT: Unindexed parameter -->
	<ParametersFn Name="ASOBO_PFN_Remove_ID_From_Parameter_Helper">
		<Parameters Type="Default">
			<OUT_PARAM_NAME>#IN_PARAM_NAME#</OUT_PARAM_NAME>
		</Parameters>
		<ReturnParameters>
			<Switch>
				<Case Valid="PREFIXED_ID">
					<Condition Check="#IN_PARAM_ID#_#IN_PARAM_NAME#">
						<#OUT_PARAM_NAME# Process="Param">#IN_PARAM_ID#_#IN_PARAM_NAME#</#OUT_PARAM_NAME#>						
					</Condition>
				</Case>
				<Default>
					<Condition Check="#IN_PARAM_NAME#_#IN_PARAM_ID#">
						<#OUT_PARAM_NAME# Process="Param">#IN_PARAM_NAME#_#IN_PARAM_ID#</#OUT_PARAM_NAME#>
					</Condition>
				</Default>
			</Switch>
		</ReturnParameters>
	</ParametersFn>
	<!-- IN: IN_PARAM_0_NAME, IN_PARAM_1_NAME, ... (Name of the params to unindex) -->
	<ParametersFn Name="ASOBO_PFN_Remove_ID_From_Parameters_Helper">
		<Parameters Type="Default">
			<ELTS_COUNT>512</ELTS_COUNT>
			<FIRST_ID>0</FIRST_ID>
		</Parameters>
		<ReturnParameters>
			<Loop>
				<Setup>
					<Param>CUR_ID</Param>
					<From>#FIRST_ID#</From>
					<To>#ELTS_COUNT#</To>
					<Inc>1</Inc>
					<While>
						<Arg NotEmpty="IN_PARAM_#CUR_ID#_NAME"/>
					</While>
				</Setup>
				<Do>
					<UseParametersFn Name="ASOBO_PFN_Remove_ID_From_Parameter_Helper">
						<IN_PARAM_NAME Process="Param">IN_PARAM_#CUR_ID#_NAME</IN_PARAM_NAME>
						<Condition Check="IN_PARAM_#CUR_ID#_ID">
							<IN_PARAM_ID Process="Param">IN_PARAM_#CUR_ID#_ID</IN_PARAM_ID>
						</Condition>
					</UseParametersFn>
				</Do>
			</Loop>
		</ReturnParameters>
	</ParametersFn>
	<!-- In itself doesn't do anything other than return the value as it was provided -->
	<!-- In practice it is used w/ ASOBO_PFN_Call_Overridable_ParametersFn_Helper to let users change a value right before it is actually used -->
	<!-- IN: IN_PARAM_NAME (Name of the parameter to forward) -->
	<!-- IN (opt): OUT_PARAM_NAME (Output Name of the parameter to forward) -->
	<ParametersFn Name="ASOBO_PFN_Return_Parameter_No_Transform_Helper">
		<Parameters Type="Default">
			<OUT_PARAM_NAME>#IN_PARAM_NAME#</OUT_PARAM_NAME>
		</Parameters>
		<ReturnParameters>
			<#OUT_PARAM_NAME# Process="Param">#IN_PARAM_NAME#</#OUT_PARAM_NAME#>
		</ReturnParameters>
	</ParametersFn>
	<!-- Same as ASOBO_PFN_Return_Parameter_No_Transform_Helper but for multiple parameters at a time -->
	<!-- IN: IN_PARAM_NAME_0, IN_PARAM_NAME_1, ... (Name of the parameters to forward) -->
	<ParametersFn Name="ASOBO_PFN_Return_Parameters_No_Transform_Helper">
		<ReturnParameters>
			<Loop>
				<Setup>
					<Param>CUR_ID</Param>
					<From>0</From>
					<Inc>1</Inc>
					<While>
						<Arg Check="IN_PARAM_NAME_#CUR_ID#"/>
					</While>
				</Setup>
				<Do>
					<UseParametersFn Name="ASOBO_PFN_Return_Parameter_No_Transform_Helper">
						<IN_PARAM_NAME Process="Param">IN_PARAM_NAME_#CUR_ID#</IN_PARAM_NAME>
					</UseParametersFn>
				</Do>
			</Loop>
		</ReturnParameters>
	</ParametersFn>
	<!-- IN (opt): IN_PARAM_NAME_ID (ID used for generating the SUFFIX_ID) -->
	<!-- IN (opt): OUT_PARAM_VALUE_PREFIX (Prefix given to the input IN_PARAM_NAME_ID value) -->
	<!-- IN (opt): OUT_PARAM_VALUE_SUFFIX (Suffix given to the input IN_PARAM_NAME_ID value) -->
	<!-- IN (opt): OUT_PARAM_NAME (Name given to the parameter in the output) -->
	<!-- OUT: SUFFIX_ID -->
	<ParametersFn Name="ASOBO_Indexer_Helper">
		<Parameters Type="Default">
			<OUT_PARAM_VALUE_PREFIX>_</OUT_PARAM_VALUE_PREFIX>
			<OUT_PARAM_VALUE_SUFFIX/>
		</Parameters>
		<Parameters Type="Override">
			<__PARAM_VALUE__ Process="Param">#IN_PARAM_NAME_ID#</__PARAM_VALUE__>
		</Parameters>
		<Parameters Type="Default">
			<OUT_PARAM_NAME>SUFFIX_#IN_PARAM_NAME_ID#</OUT_PARAM_NAME>
		</Parameters>
		<ReturnParameters>
			<#OUT_PARAM_NAME#>#OUT_PARAM_VALUE_PREFIX##__PARAM_VALUE__##OUT_PARAM_VALUE_SUFFIX#</#OUT_PARAM_NAME#>
			<#IN_PARAM_NAME_ID# Process="Param">#IN_PARAM_NAME_ID#</#IN_PARAM_NAME_ID#>
		</ReturnParameters>
	</ParametersFn>
	<!-- IN: PFN_TO_CALL (pfn to call for each element) -->
	<!-- IN: PFN_GET_PARAMETERS (PFN to call to get a list of parameters) -->
	<!-- IN (opt): OUT_PARAM_NAME (Name of the parameter containing the parameter name) -->
	<!-- IN (opt): OUT_PARAM_VALUE (Name of the parameter containing the parameter value) -->
	<!-- IN (opt): OUT_PARAM_ID (Name of the parameter containing the parameter id) -->
	<ParametersFn Name="ASOBO_For_Each_Of_PFN_Helper">
		<Parameters Type="Default">
			<OUT_PARAM_NAME>PARAM_NAME</OUT_PARAM_NAME>
			<OUT_PARAM_VALUE>PARAM_VALUE</OUT_PARAM_VALUE>
			<OUT_PARAM_ID>PARAM_ID</OUT_PARAM_ID>
		</Parameters>
		<ReturnParameters>
			<Loop>
				<Setup>
					<Param>PARAM</Param>
					<Value>VALUE</Value>
					<Parameters>
						<UseParametersFn Name="#PFN_GET_PARAMETERS#"/>
					</Parameters>
				</Setup>
				<Do>
					<Parameters Type="Override" Lifetime="Loop">
						<UseParametersFn Name="ASOBO_Increment_ID_Helper"/>
					</Parameters>
					<UseParametersFn Name="#PFN_TO_CALL#">
						<#OUT_PARAM_NAME#>#PARAM#</#OUT_PARAM_NAME#>
						<#OUT_PARAM_ID#>#CUR_ID#</#OUT_PARAM_ID#>
						<#OUT_PARAM_VALUE#>#VALUE#</#OUT_PARAM_VALUE#>
					</UseParametersFn>
				</Do>
			</Loop>
		</ReturnParameters>
	</ParametersFn>
	<!-- IN (opt): OUT_PARAM_ID_NAME (Name to give to the loop index parameter) -->
	<!-- IN (opt): OUT_FIRST_ID (First ID that will be assigned if the variable doesn't exist) -->
	<!-- IN (opt): INCREMENT_COUNT (How many increments) -->
	<ParametersFn Name="ASOBO_Increment_ID_Helper">
		<Parameters Type="Default">
			<OUT_PARAM_ID_NAME>CUR_ID</OUT_PARAM_ID_NAME>
			<OUT_FIRST_ID>0</OUT_FIRST_ID>
			<INCREMENT_COUNT>1</INCREMENT_COUNT>
		</Parameters>
		<Parameters Type="Override">
			<Condition Check="#OUT_PARAM_ID_NAME#">
				<CUR_VALUE Process="Param">#OUT_PARAM_ID_NAME#</CUR_VALUE>
			</Condition>
		</Parameters>
		<ReturnParameters>
			<Condition Check="#OUT_PARAM_ID_NAME#">
				<True>
					<#OUT_PARAM_ID_NAME# Process="Int">#CUR_VALUE# #INCREMENT_COUNT# +</#OUT_PARAM_ID_NAME#>
				</True>
				<False>
					<#OUT_PARAM_ID_NAME#>#OUT_FIRST_ID#</#OUT_PARAM_ID_NAME#>
				</False>
			</Condition>
		</ReturnParameters>
	</ParametersFn>
	<!-- IN (opt): TOKEN_PREFIX (Param prefix to look for) -->
	<!-- IN (opt): TOKEN_SUFFIX (Param suffix to look for) -->
	<!-- OUT: TOKEN_COUNT (number of loop iterations) -->
	<!-- OUT: LAST_TOKEN_ID (last valid id iterated on) -->
	<ParametersFn Name="ASOBO_Count_Token_Helper">
		<Parameters Type="Default">
			<FROM>0</FROM>
			<INC>1</INC>
			<TOKEN_PREFIX/>
			<TOKEN_SUFFIX/>
			<OUT_PARAM_NAME_COUNT>TOKEN_COUNT</OUT_PARAM_NAME_COUNT>
			<OUT_PARAM_NAME_LAST_ID>LAST_TOKEN_ID</OUT_PARAM_NAME_LAST_ID>
		</Parameters>
		<ReturnParameters>
			<Loop>
				<Setup>
					<Param>CUR_ID</Param>
					<From>#FROM#</From>
					<Inc>#INC#</Inc>
					<While>
						<Arg NotEmpty="#TOKEN_PREFIX##CUR_ID##TOKEN_SUFFIX#"/>
					</While>
				</Setup>
				<Do/>
				<Then>
					<#OUT_PARAM_NAME_COUNT# Process="Int">#CUR_ID# #FROM# -</#OUT_PARAM_NAME_COUNT#>
					<#OUT_PARAM_NAME_LAST_ID# Process="Int">#CUR_ID# 1 -</#OUT_PARAM_NAME_LAST_ID#>
				</Then>
			</Loop>
		</ReturnParameters>
	</ParametersFn>
	<!-- IN: TOKEN_COLLECTION (save containing parameters) -->
	<!-- IN (opt): TOKEN_PREFIX (Param prefix to look for) -->
	<!-- IN (opt): TOKEN_SUFFIX (Param suffix to look for) -->
	<!-- OUT: TOKEN_COUNT (number of loop iterations) -->
	<ParametersFn Name="ASOBO_Count_Token_In_Save_Helper">
		<Parameters Type="Default">
			<FROM>0</FROM>
			<INC>1</INC>
			<TOKEN_PREFIX/>
			<TOKEN_SUFFIX/>
			<OUT_PARAM_NAME_COUNT>TOKEN_COUNT</OUT_PARAM_NAME_COUNT>
			<OUT_PARAM_NAME_LAST_ID>LAST_TOKEN_ID</OUT_PARAM_NAME_LAST_ID>
		</Parameters>
		<Parameters Type="Override">
			<LoadParameters ID="#TOKEN_COLLECTION#"/>
		</Parameters>
		<ReturnParameters>
			<Loop>
				<Setup>
					<Param>CUR_ID</Param>
					<From>#FROM#</From>
					<Inc>#INC#</Inc>
					<While>
						<Arg NotEmpty="#TOKEN_PREFIX##CUR_ID##TOKEN_SUFFIX#"/>
					</While>
				</Setup>
				<Do/>
				<Then>
					<#OUT_PARAM_NAME_COUNT# Process="Int">#CUR_ID# #FROM# -</#OUT_PARAM_NAME_COUNT#>
					<#OUT_PARAM_NAME_LAST_ID# Process="Int">#CUR_ID# 1 -</#OUT_PARAM_NAME_LAST_ID#>
				</Then>
			</Loop>
		</ReturnParameters>
	</ParametersFn>
	<!-- IN (opt): TOKEN_PREFIX (Param prefix to look for) -->
	<!-- IN (opt): TOKEN_SUFFIX (Param suffix to look for) -->
	<!-- IN (req:Number): parameters have to be numbers -->
	<!-- OUT: TOKEN_MIN (Minimum value found) -->
	<!-- OUT: TOKEN_MAX (Maximum value found) -->
	<!-- OUT: TOKEN_COUNT (number of loop iterations) -->
	<!-- OUT: LAST_TOKEN_ID (last valid id iterated on) -->
	<ParametersFn Name="ASOBO_Find_Min_Max_Helper">
		<Parameters Type="Default">
			<MIN_INIT_VALUE>1000000</MIN_INIT_VALUE>
			<MAX_INIT_VALUE>-1000000</MAX_INIT_VALUE>
			<FROM>0</FROM>
			<INC>1</INC>
			<TOKEN_PREFIX/>
			<TOKEN_SUFFIX/>
			<OUT_PARAM_NAME_COUNT>TOKEN_COUNT</OUT_PARAM_NAME_COUNT>
			<OUT_PARAM_NAME_LAST_ID>LAST_TOKEN_ID</OUT_PARAM_NAME_LAST_ID>
			<OUT_PARAM_NAME_MIN>TOKEN_MIN</OUT_PARAM_NAME_MIN>
			<OUT_PARAM_NAME_MAX>TOKEN_MAX</OUT_PARAM_NAME_MAX>
		</Parameters>
		<Parameters Type="Override">
			<__MIN__>#MIN_INIT_VALUE#</__MIN__>
			<__MAX__>#MAX_INIT_VALUE#</__MAX__>
		</Parameters>
		<ReturnParameters>
			<Loop>
				<Setup>
					<Param>CUR_ID</Param>
					<From>#FROM#</From>
					<Inc>#INC#</Inc>
					<While>
						<Arg Check="#TOKEN_PREFIX##CUR_ID##TOKEN_SUFFIX#"/>
					</While>
				</Setup>
				<Do>
					<Parameters Type="Override">
						<PARAM_VALUE Process="Param">#TOKEN_PREFIX##CUR_ID##TOKEN_SUFFIX#</PARAM_VALUE>
					</Parameters>
					<Parameters Type="Override" Lifetime="Loop">
						<Condition>
							<Test>
								<Lower>
									<Number>#PARAM_VALUE#</Number>
									<Number>#__MIN__#</Number>
								</Lower>
							</Test>
							<True>
								<__MIN__>#PARAM_VALUE#</__MIN__>
							</True>
						</Condition>
						<Condition>
							<Test>
								<Greater>
									<Number>#PARAM_VALUE#</Number>
									<Number>#__MAX__#</Number>
								</Greater>
							</Test>
							<True>
								<__MAX__>#PARAM_VALUE#</__MAX__>
							</True>
						</Condition>
					</Parameters>
				</Do>
				<Then>
					<#OUT_PARAM_NAME_LAST_ID# Process="Int">#CUR_ID# 1 -</#OUT_PARAM_NAME_LAST_ID#>
					<#OUT_PARAM_NAME_COUNT#>#CUR_ID#</#OUT_PARAM_NAME_COUNT#>
					<#OUT_PARAM_NAME_MIN#>#__MIN__#</#OUT_PARAM_NAME_MIN#>
					<#OUT_PARAM_NAME_MAX#>#__MAX__#</#OUT_PARAM_NAME_MAX#>
				</Then>
			</Loop>
		</ReturnParameters>
	</ParametersFn>
	<!-- Same as ASOBO_Find_Min_Max_Helper but looking for a specific save -->
	<!-- IN : SAVED_PARAMETERS (Param prefix to look for) -->
	<!-- OUT: TOKEN_MIN (Minimum value found) -->
	<!-- OUT: TOKEN_MAX (Maximum value found) -->
	<!-- OUT: TOKEN_COUNT (number of loop iterations) -->
	<!-- OUT: LAST_TOKEN_ID (last valid id iterated on) -->
	<ParametersFn Name="ASOBO_Find_Min_Max_Helper_In">
		<Parameters Type="Default">
			<MIN_INIT_VALUE>1000000</MIN_INIT_VALUE>
			<MAX_INIT_VALUE>-1000000</MAX_INIT_VALUE>
			<OUT_PARAM_NAME_COUNT>TOKEN_COUNT</OUT_PARAM_NAME_COUNT>
			<OUT_PARAM_NAME_LAST_ID>LAST_TOKEN_ID</OUT_PARAM_NAME_LAST_ID>
			<OUT_PARAM_NAME_MIN>TOKEN_MIN</OUT_PARAM_NAME_MIN>
			<OUT_PARAM_NAME_MAX>TOKEN_MAX</OUT_PARAM_NAME_MAX>
		</Parameters>
		<Parameters Type="Override">
			<__MIN__>#MIN_INIT_VALUE#</__MIN__>
			<__MAX__>#MAX_INIT_VALUE#</__MAX__>
		</Parameters>
		<ReturnParameters>
			<Loop>
				<Setup>
					<Value>PARAM_VALUE</Value>
					<Parameters>
						<LoadParameters ID="#SAVED_PARAMETERS#"/>
					</Parameters>
				</Setup>
				<Do>
					<Parameters Type="Override" Lifetime="Loop">
						<UseParametersFn Name="ASOBO_Increment_ID_Helper"/>
					</Parameters>
					<Parameters Type="Override" Lifetime="Loop">
						<Condition>
							<Test>
								<Lower>
									<Number>#PARAM_VALUE#</Number>
									<Number>#__MIN__#</Number>
								</Lower>
							</Test>
							<True>
								<__MIN__>#PARAM_VALUE#</__MIN__>
							</True>
						</Condition>
						<Condition>
							<Test>
								<Greater>
									<Number>#PARAM_VALUE#</Number>
									<Number>#__MAX__#</Number>
								</Greater>
							</Test>
							<True>
								<__MAX__>#PARAM_VALUE#</__MAX__>
							</True>
						</Condition>
					</Parameters>
				</Do>
				<Then>
					<#OUT_PARAM_NAME_LAST_ID#>#CUR_ID#</#OUT_PARAM_NAME_LAST_ID#>
					<#OUT_PARAM_NAME_COUNT# Process="Int">#CUR_ID# 1 +</#OUT_PARAM_NAME_COUNT#>
					<#OUT_PARAM_NAME_MIN#>#__MIN__#</#OUT_PARAM_NAME_MIN#>
					<#OUT_PARAM_NAME_MAX#>#__MAX__#</#OUT_PARAM_NAME_MAX#>
				</Then>
			</Loop>
		</ReturnParameters>
	</ParametersFn>
	<!-- IN: SAVED_PARAMETERS (name of the saved parameters to load) -->
	<!-- OUT: loaded parameters with original save removed by default -->
	<ParametersFn Name="ASOBO_Load_Then_Remove_Parameters_Helper">
		<Parameters Type="Default">
			<REMOVE_#SAVED_PARAMETERS#>True</REMOVE_#SAVED_PARAMETERS#>
		</Parameters>
		<Parameters Type="Override">
			<__SAVED_PARAMETERS__ Process="Param">#SAVED_PARAMETERS#</__SAVED_PARAMETERS__>
		</Parameters>
		<ReturnParameters>
			<Condition CheckSavedParameters="#__SAVED_PARAMETERS__#">
				<LoadParameters ID="#__SAVED_PARAMETERS__#"/>
				<Condition Valid="REMOVE_#SAVED_PARAMETERS#">
					<RemoveSavedParameters ID="#__SAVED_PARAMETERS__#"/>					
				</Condition>
			</Condition>
		</ReturnParameters>
	</ParametersFn>
	<!-- IN: SAVED_PARAMETERS (name of the saved parameters to load) -->
	<!-- IN: SAVE_TO (name of the saved parameters to load) -->
	<!-- OUT: loaded parameters with original save removed by default -->
	<ParametersFn Name="ASOBO_Save_To_Then_Remove_Parameters_Helper">
		<Parameters Type="Default">
			<REMOVE_#SAVED_PARAMETERS#>True</REMOVE_#SAVED_PARAMETERS#>
			<APPEND>Override</APPEND>
		</Parameters>
		<Parameters Type="Override">
			<__SAVED_PARAMETERS__ Process="Param">#SAVED_PARAMETERS#</__SAVED_PARAMETERS__>
		</Parameters>
		<ReturnParameters>
			<Condition CheckSavedParameters="#__SAVED_PARAMETERS__#">
				<SaveParameters ID="#SAVE_TO#" Append="#APPEND#">
					<LoadParameters ID="#__SAVED_PARAMETERS__#"/>
				</SaveParameters>
				<Condition Valid="REMOVE_#SAVED_PARAMETERS#">
					<RemoveSavedParameters ID="#__SAVED_PARAMETERS__#"/>					
				</Condition>
			</Condition>
		</ReturnParameters>
	</ParametersFn>
	<!-- In: MAX_VALUE (value maximum has to be positive) -->
	<!-- In: MIN_VALUE (value minimum has to be negative) -->
	<!-- OUT: computed ratios to 0 -->
	<ParametersFn Name="ASOBO_Get_MIN_MAX_Ratios_Helper">
		<Parameters Type="Override">
			<FULL_RANGE Process="Float">#MAX_VALUE# #MIN_VALUE# -</FULL_RANGE>
			<POSITIVE_RANGE Process="Float">#MAX_VALUE# 0 -</POSITIVE_RANGE>
			<NEGATIVE_RANGE Process="Float">0 #MIN_VALUE# -</NEGATIVE_RANGE>
		</Parameters>
		<Parameters Type="Override">
			<RATIO_POSITIVE Process="Float">#POSITIVE_RANGE# #FULL_RANGE# /</RATIO_POSITIVE>
			<RATIO_NEGATIVE Process="Float">#NEGATIVE_RANGE# #FULL_RANGE# /</RATIO_NEGATIVE>
		</Parameters>
		<Parameters Type="Override">
			<POSITIVE_TO_NEGATIVE_RATIO Process="Float">#RATIO_NEGATIVE# 0 &gt; if{ #RATIO_POSITIVE# #RATIO_NEGATIVE# / } els{ 1 }</POSITIVE_TO_NEGATIVE_RATIO> 
			<NEGATIVE_TO_POSITIVE_RATIO Process="Float">#RATIO_POSITIVE# 0 &gt; if{ #RATIO_NEGATIVE# #RATIO_POSITIVE# / } els{ 1 }</NEGATIVE_TO_POSITIVE_RATIO>
		</Parameters>
		<ReturnParameters>
			<FULL_RANGE>#FULL_RANGE#</FULL_RANGE>
			<POSITIVE_RANGE>#POSITIVE_RANGE#</POSITIVE_RANGE>
			<NEGATIVE_RANGE>#NEGATIVE_RANGE#</NEGATIVE_RANGE>
			<RATIO_POSITIVE>#RATIO_POSITIVE#</RATIO_POSITIVE>
			<RATIO_NEGATIVE>#RATIO_NEGATIVE#</RATIO_NEGATIVE>
			<POSITIVE_TO_NEGATIVE_RATIO>#POSITIVE_TO_NEGATIVE_RATIO#</POSITIVE_TO_NEGATIVE_RATIO>
			<NEGATIVE_TO_POSITIVE_RATIO>#NEGATIVE_TO_POSITIVE_RATIO#</NEGATIVE_TO_POSITIVE_RATIO>
			<MIN_VALUE>#MIN_VALUE#</MIN_VALUE>
			<MAX_VALUE>#MAX_VALUE#</MAX_VALUE>
		</ReturnParameters>
	</ParametersFn>
	<!-- In (opt): OUT_PARAM_ID -->
	<!-- OUT: OUT_PARAM_SUFFIX -->
	<ParametersFn Name="ASOBO_Get_Param_Suffix_Helper">
		<Parameters Type="Default">
			<OUT_PARAM_NAME>OUT_PARAM_SUFFIX</OUT_PARAM_NAME>
		</Parameters>
		<Parameters Type="Default">
			<Condition Check="OUT_PARAM_ID">
				<True>
					<OUT_PARAM_SUFFIX>_#OUT_PARAM_ID#</OUT_PARAM_SUFFIX>
				</True>
				<False>
					<OUT_PARAM_SUFFIX/>
				</False>
			</Condition>
		</Parameters>
		<ReturnParameters>
			<#OUT_PARAM_NAME#>#OUT_PARAM_SUFFIX#</#OUT_PARAM_NAME#>
		</ReturnParameters>
	</ParametersFn>
	<!-- In (opt): OUT_PARAM_ID -->
	<!-- OUT: OUT_PARAM_PREFIX -->
	<ParametersFn Name="ASOBO_Get_Param_Prefix_Helper">
		<Parameters Type="Default">
			<Condition Check="OUT_PARAM_ID">
				<True>
					<OUT_PARAM_PREFIX>#OUT_PARAM_ID#_</OUT_PARAM_PREFIX>					
				</True>
				<False>
					<OUT_PARAM_PREFIX/>
				</False>
			</Condition>
		</Parameters>
		<ReturnParameters>
			<OUT_PARAM_PREFIX>#OUT_PARAM_PREFIX#</OUT_PARAM_PREFIX>
		</ReturnParameters>
	</ParametersFn>
	
	<!-- In: Any number of PARAM_PREFIX_N or PARAM_SUFFIX_N (N being a sequentially increasing int, starting at 0) -->
	<!-- OUT: A param named by the value of OUTGOING_PARAM (defaults to OUT_VALUE), which contains the maximum value of N -->
	<ParametersFn Name="ASOBO_Get_Max_Param_Iteration_Helper">
		<Parameters Type="Default">
			<MAX_VALUE>-1</MAX_VALUE>
			<PARAM_PREFIX/>
			<PARAM_SUFFIX/>
			<MAX_ITERATION>0</MAX_ITERATION>
			<OUTGOING_PARAM>OUT_VALUE</OUTGOING_PARAM>
		</Parameters>
		<Parameters Type="Override">
			<Loop>
				<Setup>
					<Param>CUR_ID</Param>
					<From>1</From>
					<Inc>1</Inc>
					<While>
						<Not>
							<Arg Valid="INFINITE"/>
						</Not>
					</While>
				</Setup>
				<Do>
					<SaveParameters ID="MaxParam_FoundValue">
						<FOUND_VALUE>False</FOUND_VALUE>
						<MAX_ITERATION>#MAX_ITERATION#</MAX_ITERATION>
					</SaveParameters>
					<Parameters Type="Override" Lifetime="Loop">
						<Loop>
							<Setup>
								<Param>CUR_PARAM_ID</Param>
								<From>0</From>
								<Inc>1</Inc>
								<While>
									<Or>
										<Arg NotEmpty="PARAM_PREFIX_#CUR_PARAM_ID#"/>
										<Arg NotEmpty="PARAM_SUFIX_#CUR_PARAM_ID#"/>
									</Or>
								</While>
							</Setup>
							<Do>
								<Parameters Type="Override" Lifetime="Iteration">
									<PARAM_PREFIX Process="Param">PARAM_PREFIX_#CUR_PARAM_ID#</PARAM_PREFIX>
									<PARAM_SUFIX Process="Param">PARAM_SUFIX_#CUR_PARAM_ID#</PARAM_SUFIX>
								</Parameters>
								<Parameters Type="Override" Lifetime="Iteration">
									<PARAM_FINAL Process="Param">#PARAM_PREFIX##CUR_ID##PARAM_SUFFIX#</PARAM_FINAL>
								</Parameters>
								<Parameters Type="Override" Lifetime="Loop">
									<Condition NotEmpty="PARAM_FINAL">
										<SaveParameters ID="MaxParam_FoundValue">
											<FOUND_VALUE>True</FOUND_VALUE>
											<MAX_ITERATION Process="Int">#MAX_ITERATION# #CUR_ID# max</MAX_ITERATION>
										</SaveParameters>
									</Condition>
								</Parameters>
							</Do>
						</Loop>
						<LoadParameters ID="MaxParam_FoundValue"/>
						<Condition Valid="FOUND_VALUE">
							<False>
								<Break/>
							</False>
						</Condition>
					</Parameters>
				</Do>
			</Loop>
			<LoadParameters ID="MaxParam_FoundValue"/>
		</Parameters>
		
		<ReturnParameters>
			<#OUTGOING_PARAM# Process="Int">#MAX_ITERATION#</#OUTGOING_PARAM#>
		</ReturnParameters>
	</ParametersFn>
	
	<ParametersFn Name="ASOBO_Get_Non_Linear_Animation_Code">
		<Parameters Type="Default">
			<SELECTION>50</SELECTION><!-- dynamic parameter for example gallons qty in a fuel tank -->
			<!-- at least 2 points of reference to interpolate -->
			<!-- ANIM_VALUE = frame for which the REF_VALUE is corresponding -->
			<!-- REF_VALUE = value used as a comparison point to SELECTION -->
			<ANIM_VALUE_0>0</ANIM_VALUE_0>
			<REF_VALUE_0>0</REF_VALUE_0>
			<ANIM_VALUE_1>100</ANIM_VALUE_1>
			<REF_VALUE_1>100</REF_VALUE_1>
			<!-- Add as much as necessary when calling the template -->
			<!-- ######################################################### -->
			<ANIM_LENGTH>100</ANIM_LENGTH><!-- number of frame in the animation -->
			<MAX_POINT_INDEX>1</MAX_POINT_INDEX><!-- index of latest point of reference -->
			<MAX_DISPLAYABLE>100</MAX_DISPLAYABLE><!-- higher bound the value SELECTION can reach (the maximum your gauge can display) -->
			<MIN_DISPLAYABLE>0</MIN_DISPLAYABLE><!-- lower bound the value SELECTION can reach (the minimum your gauge can display) -->
			<EXIT_TEMPLATE>ASOBO_GT_Anim_Code</EXIT_TEMPLATE>
			<EXIT_PARAM_NAME>ANIM_CODE</EXIT_PARAM_NAME>
			<CONTENT></CONTENT><!-- CONTENT init: can be used to tweak the value before interpolating -->
		</Parameters>
		<Parameters Type="Override">
			<ANIM_VAL_PREVIOUS_POINT Process="Param">ANIM_VALUE_#MAX_POINT_INDEX#</ANIM_VAL_PREVIOUS_POINT>
			<REF_VAL_PREVIOUS_POINT Process="Param">REF_VALUE_#MAX_POINT_INDEX#</REF_VAL_PREVIOUS_POINT>
			<MAX_POINT_INDEX_MINUS_1 Process="Param">#MAX_POINT_INDEX# 1 -</MAX_POINT_INDEX_MINUS_1>
		</Parameters>
		<Parameters Type="Override">
			<Loop>
				<Setup>
					<Param>NEXT_ID</Param>
					<From>#MAX_POINT_INDEX#</From>
					<Inc>-1</Dec>
					<To>0</To>
				</Setup>
				<Do>
					<Parameters Type="Override" Lifetime="Loop">
						<ANIM_VAL_CURRENT_POINT Process="Param">ANIM_VALUE_#NEXT_ID#</ANIM_VAL_CURRENT_POINT>
						<REF_VAL_CURRENT_POINT Process="Param">REF_VALUE_#NEXT_ID#</REF_VAL_CURRENT_POINT>
					</Parameters>
					<Parameters Type="Override" Lifetime="Loop">
						<CONTENT>
							#CONTENT#
							l0 #REF_VAL_CURRENT_POINT# &gt; if{
								l0 #REF_VAL_CURRENT_POINT# - #REF_VAL_PREVIOUS_POINT# #REF_VAL_CURRENT_POINT# - / #ANIM_VAL_PREVIOUS_POINT# #ANIM_VAL_CURRENT_POINT# - * #ANIM_VAL_CURRENT_POINT# + sp1 g1
							}
						</CONTENT>
						<ANIM_VAL_PREVIOUS_POINT Process="Param">ANIM_VALUE_#NEXT_ID#</ANIM_VAL_PREVIOUS_POINT>
						<REF_VAL_PREVIOUS_POINT Process="Param">REF_VALUE_#NEXT_ID#</REF_VAL_PREVIOUS_POINT>
					</Parameters>
				</Do>
				<Then>
					<RETURN_VALUE>
						#SELECTION# #MAX_DISPLAYABLE# min #MIN_DISPLAYABLE# max sp0
						#CONTENT#
						:1 l1
					</RETURN_VALUE>
				</Then>
			</Loop>
		</Parameters>
		<ReturnParameters>
			<#EXIT_PARAM_NAME#>#RETURN_VALUE#</#EXIT_PARAM_NAME#>
		</ReturnParameters>
	</ParametersFn>
</ModelBehaviors>